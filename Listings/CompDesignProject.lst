C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 16:38:55 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE COMPDESIGNPROJECT
OBJECT MODULE PLACED IN .\Objects\CompDesignProject.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE CompDesignProject.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\CompDesignProject.lst) TABS(2) OBJECT(.\Objects\CompDesignProject.obj)

line level    source

   1          /* Auth: Megan Bird
   2           * File: CompDesignProject.c
   3           * Course: CEEN-4330 – Microprocessor System Design – University of Nebraska-Lincoln
   4           * Lab: Project
   5           * Date: 3/14/2017
   6           * Desc: 8051 program with ROM, RAM, and I/O
   7           */
   8           
   9          #include <REGX55.H>
  10          #include <stdio.h>
  11          
  12          // P1
  13          sbit P1_0 = P1^0;
  14          sbit P1_1 = P1^1;
  15          
  16          // P3
  17          sbit P3_0 = P3^0;
  18          sbit P3_1 = P3^1;
  19          sbit P3_2 = P3^2;
  20          sbit P3_3 = P3^3;
  21          sbit P3_4 = P3^4;
  22          sbit P3_5 = P3^5;
  23          sbit P3_6 = P3^6;
  24          sbit P3_7 = P3^7;
  25          
  26          // Keypad
  27          sbit kCol1  = P1^7;
  28          sbit kCol2  = P1^6;
  29          sbit kCol3  = P1^5;
  30          sbit kCol4  = P1^4;
  31          sbit kRow1  = P1^3;
  32          sbit kRow2  = P1^2;
  33          sbit kRow3  = P1^1;
  34          sbit kRow4  = P1^0;
  35          sbit cs_keypad = P3^1;    // latch
  36          sbit oe_keypad = P3^2;
  37          
  38          // Seven-Segment Display
  39          sfr sevenSegPort = 0x90;
  40          sbit cs_sevenSeg = P3^0;  // latch
  41          
  42          // LCD
  43          sbit cs_lcd = P3^3;       // latch
  44          sbit rs_lcd = P3^4;       // reg select
  45          sbit e_lcd  = P3^5;       // enable
  46          // rw tied to ground to always enable read
  47          sfr lcdPort = 0x90;
  48          
  49          // ======================= prototypes =========================== //
  50          
  51          typedef unsigned char byte;
  52          
  53          struct keypad_data {
  54            unsigned char k1;
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 16:38:55 PAGE 2   

  55            unsigned char k2;
  56            unsigned char k3;
  57            unsigned char k4;
  58            unsigned char k5;
  59            unsigned char k6;
  60            unsigned char k7;
  61            unsigned char k8;
  62            unsigned char k9;
  63            unsigned char k0;
  64            unsigned char kA;
  65            unsigned char kB;
  66            unsigned char kC;
  67            unsigned char kD;
  68            unsigned char kstar;
  69            unsigned char kpound;
  70          };
  71          
  72          void latchSevenSeg( void );
  73          void latchKeypad( void );
  74          void outputSevenSeg( char character );
  75          struct keypad_data getKeysPressed( void );
  76          void displayKeyPressed( struct keypad_data keypad );
  77          void lcdCmd( byte cmd );
  78          void lcdData( byte dat );
  79          void lcdInit( void );
  80          void lcdClear( void );
  81          void lcdChar( byte character );
  82          void lcdString( volatile char *string );
  83          void lcdLine( int line );
  84          void msDelay( unsigned msecs );
  85          
  86          // ======================== main ================================ //
  87          
  88          void main(void) {
  89   1        
  90   1        struct keypad_data keypad;
  91   1        
  92   1        char string1[] = "Hello world`";
  93   1        char string2[] = "M&M's`";
  94   1        
  95   1        cs_keypad = 0;
  96   1        cs_sevenSeg = 0;
  97   1        cs_lcd = 0;
  98   1        
  99   1        lcdInit();
 100   1        
 101   1        lcdLine(1);
 102   1        lcdString( &string1 );
 103   1        lcdLine(2);
 104   1        lcdString( &string2 );
 105   1      
 106   1        while(1); // Stay off the streets
 107   1        
 108   1      } // end main()
*** WARNING C280 IN LINE 90 OF CompDesignProject.c: 'keypad': unreferenced local variable
 109          
 110          // ======================= functions ============================ //
 111          
 112          void latchSevenSeg( void ) {
 113   1        
 114   1        cs_sevenSeg = 1;
 115   1        cs_sevenSeg = 0;
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 16:38:55 PAGE 3   

 116   1        
 117   1      } // end latchSevenSeg()
 118          
 119          // -------------------------------------------------------------- //
 120          
 121          void latchKeypad( void ) {
 122   1        
 123   1        cs_keypad = 1;
 124   1        cs_keypad = 0;
 125   1        
 126   1      } // end latchKeypad()
 127          
 128          // -------------------------------------------------------------- //
 129          
 130          void latchLCD( void ) {
 131   1        
 132   1        cs_lcd = 1;
 133   1        cs_lcd = 0;
 134   1        
 135   1      } // end latchLCD()
 136          
 137          // -------------------------------------------------------------- //
 138          
 139          void outputSevenSeg( char character ) {
 140   1        
 141   1        switch( character ) {
 142   2          case '0': sevenSegPort = ~0x3F; break;
 143   2          case '1': sevenSegPort = ~0x06; break;
 144   2          case '2': sevenSegPort = ~0x5B; break;
 145   2          case '3': sevenSegPort = ~0x4F; break;
 146   2          case '4': sevenSegPort = ~0x66; break;
 147   2          case '5': sevenSegPort = ~0x6D; break;
 148   2          case '6': sevenSegPort = ~0x7D; break;
 149   2          case '7': sevenSegPort = ~0x07; break;
 150   2          case '8': sevenSegPort = ~0x7F; break;
 151   2          case '9': sevenSegPort = ~0x67; break;
 152   2          case 'A': sevenSegPort = ~0x77; break;
 153   2          case 'b': sevenSegPort = ~0x7C; break;
 154   2          case 'C': sevenSegPort = ~0x39; break;
 155   2          case 'd': sevenSegPort = ~0x5E; break;
 156   2          case 'E': sevenSegPort = ~0x79; break;
 157   2          case 'F': sevenSegPort = ~0x71; break;
 158   2          case '-': sevenSegPort = 0xBF;  break;
 159   2          case '.': sevenSegPort = 0x7F;  break;
 160   2          case 'o': sevenSegPort = 0xFF;  break;  // off
 161   2          default:  sevenSegPort = 0xAA;          // invalid
 162   2        }
 163   1        
 164   1        latchSevenSeg();
 165   1        
 166   1      } // end outputSevenSeg()
 167          
 168          // -------------------------------------------------------------- //
 169          
 170          struct keypad_data getKeysPressed( void ) {
 171   1        
 172   1        struct keypad_data keypad;
 173   1        
 174   1        // enable keypad latch output
 175   1        oe_keypad = 0;
 176   1        
 177   1        // Set keypad columns as outputs & rows as inputs
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 16:38:55 PAGE 4   

 178   1        kCol1 = 0;
 179   1        kCol2 = 0;
 180   1        kCol3 = 0;
 181   1        kCol4 = 0;
 182   1        kRow1 = 1;
 183   1        kRow2 = 1;
 184   1        kRow3 = 1;
 185   1        kRow4 = 1;
 186   1        
 187   1        // scan by columns
 188   1      
 189   1        // column 1
 190   1        kCol1 = 0;
 191   1        kCol2 = 1;
 192   1        kCol3 = 1;
 193   1        kCol4 = 1;
 194   1        latchKeypad();
 195   1        
 196   1        if (kRow1 == 0) {
 197   2          keypad.k1 = 1;
 198   2        }
 199   1        else {
 200   2          keypad.k1 = 0;
 201   2        }
 202   1        if (kRow2 == 0) {
 203   2          keypad.k4 = 1;
 204   2        }
 205   1        else {
 206   2          keypad.k4 = 0;
 207   2        }
 208   1        if (kRow3 == 0) {
 209   2          keypad.k7 = 1;
 210   2        }
 211   1        else {
 212   2          keypad.k7 = 0;
 213   2        }
 214   1        if (kRow4 == 0) {
 215   2          keypad.kstar = 1;
 216   2        }
 217   1        else {
 218   2          keypad.kstar = 0;
 219   2        }
 220   1        kCol1 = 1;
 221   1        
 222   1        // column 2
 223   1        kCol2 = 0;
 224   1        latchKeypad();
 225   1        
 226   1        if (kRow1 == 0) {
 227   2          keypad.k2 = 1;
 228   2        }
 229   1        else {
 230   2          keypad.k2 = 0;
 231   2        }
 232   1        if (kRow2 == 0) {
 233   2          keypad.k5 = 1;
 234   2        }
 235   1        else {
 236   2          keypad.k5 = 0;
 237   2        }
 238   1        if (kRow3 == 0) {
 239   2          keypad.k8 = 1;
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 16:38:55 PAGE 5   

 240   2        }
 241   1        else {
 242   2          keypad.k8 = 0;
 243   2        }
 244   1        if (kRow4 == 0) {
 245   2          keypad.k0 = 1;
 246   2        }
 247   1        else {
 248   2          keypad.k0 = 0;
 249   2        }
 250   1        kCol2 = 1;
 251   1        
 252   1        // column 3
 253   1        kCol3 = 0;
 254   1        latchKeypad();
 255   1        
 256   1        if (kRow1 == 0) {
 257   2          keypad.k3 = 1;
 258   2        }
 259   1        else {
 260   2          keypad.k3 = 0;
 261   2        }
 262   1        if (kRow2 == 0) {
 263   2          keypad.k6 = 1;
 264   2        }
 265   1        else {
 266   2          keypad.k6 = 0;
 267   2        }
 268   1        if (kRow3 == 0) {
 269   2          keypad.k9 = 1;
 270   2        }
 271   1        else {
 272   2          keypad.k9 = 0;
 273   2        }
 274   1        if (kRow4 == 0) {
 275   2          keypad.kpound = 1;
 276   2        }
 277   1        else {
 278   2          keypad.kpound = 0;
 279   2        }
 280   1        kCol3 = 1;
 281   1        
 282   1        // column 4
 283   1        kCol4 = 0;
 284   1        latchKeypad();
 285   1        
 286   1        if (kRow1 == 0) {
 287   2          keypad.kA = 1;
 288   2        }
 289   1        else {
 290   2          keypad.kA = 0;
 291   2        }
 292   1        if (kRow2 == 0) {
 293   2          keypad.kB = 1;
 294   2        }
 295   1        else {
 296   2          keypad.kB = 0;
 297   2        }
 298   1        if (kRow3 == 0) {
 299   2          keypad.kC = 1;
 300   2        }
 301   1        else {
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 16:38:55 PAGE 6   

 302   2          keypad.kC = 0;
 303   2        }
 304   1        if (kRow4 == 0) {
 305   2          keypad.kD = 1;
 306   2        }
 307   1        else {
 308   2          keypad.kD = 0;
 309   2        }
 310   1        kCol4 = 1;
 311   1        latchKeypad();
 312   1        
 313   1        // disable keypad latch output
 314   1        oe_keypad = 1;
 315   1        
 316   1        return keypad; 
 317   1        
 318   1      } // end getKeysPressed()
 319          
 320          // -------------------------------------------------------------- //
 321          
 322          void displayKeyPressed( struct keypad_data keypad ) {
 323   1        
 324   1        if ( keypad.k1 == 1 ) {
 325   2          outputSevenSeg('1');
 326   2        }
 327   1        else if ( keypad.k2 == 1 ) {
 328   2          outputSevenSeg('2');
 329   2        }
 330   1        else if ( keypad.k3 == 1 ) {
 331   2          outputSevenSeg('3');
 332   2        }
 333   1        else if ( keypad.k4 == 1 ) {
 334   2          outputSevenSeg('4');
 335   2        }
 336   1        else if ( keypad.k5 == 1 ) {
 337   2          outputSevenSeg('5');
 338   2        }
 339   1        else if ( keypad.k6 == 1 ) {
 340   2          outputSevenSeg('6');
 341   2        }
 342   1        else if ( keypad.k7 == 1 ) {
 343   2          outputSevenSeg('7');
 344   2        }
 345   1        else if ( keypad.k8 == 1 ) {
 346   2          outputSevenSeg('8');
 347   2        }
 348   1        else if ( keypad.k9 == 1 ) {
 349   2          outputSevenSeg('9');
 350   2        }
 351   1        else if ( keypad.kA == 1 ) {
 352   2          outputSevenSeg('A');
 353   2        }
 354   1        else if ( keypad.k0 == 1 ) {
 355   2          outputSevenSeg('0');
 356   2        }
 357   1        else if ( keypad.kB == 1 ) {
 358   2          outputSevenSeg('b');
 359   2        }
 360   1        else if ( keypad.kC == 1 ) {
 361   2          outputSevenSeg('C');
 362   2        }
 363   1        else if ( keypad.kD == 1 ) {
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 16:38:55 PAGE 7   

 364   2          outputSevenSeg('d');
 365   2        }
 366   1        else if ( keypad.kstar == 1 ) {
 367   2          outputSevenSeg('.');
 368   2        }
 369   1        else if ( keypad.kpound == 1 ) {
 370   2          outputSevenSeg('-');
 371   2        }
 372   1        else {
 373   2          outputSevenSeg('o');
 374   2        }
 375   1        
 376   1      } // end displayKeyPressed()
 377            
 378          // -------------------------------------------------------------- //
 379          
 380          void lcdCmd( byte cmd ) {
 381   1        
 382   1        rs_lcd = 0;     // reg select low for command
 383   1        // --- RW tied low for write --- //
 384   1        e_lcd = 1;      // E high for pulse
 385   1        
 386   1        lcdPort = cmd;
 387   1        latchLCD();
 388   1        
 389   1        msDelay(1);     // Need Tpw > 140 ns
 390   1        e_lcd = 0;      // E low to end pulse
 391   1        
 392   1      } // end lcdCmd()
 393          
 394          // -------------------------------------------------------------- //
 395          
 396          void lcdData( byte dat ) {
 397   1        
 398   1        rs_lcd = 1;     // reg select high for data
 399   1        // --- RW tied low for write --- //
 400   1        e_lcd = 1;      // E high for pulse
 401   1        
 402   1        lcdPort = dat;
 403   1        latchLCD();
 404   1        
 405   1        msDelay(1);     // Need Tpw > 140 ns
 406   1        e_lcd = 0;      // E low to end pulse
 407   1        msDelay(1);
 408   1        
 409   1      } // end lcdData()
 410          
 411          // -------------------------------------------------------------- //
 412          
 413          void lcdInit( void ) {  
 414   1        
 415   1        msDelay(50);
 416   1        lcdCmd(0x38);     // Function set
 417   1        msDelay(5);
 418   1        lcdCmd(0x38);     // Function set
 419   1        msDelay(1);
 420   1        lcdCmd(0x0F);     // Display ON/OFF control
 421   1        msDelay(1);
 422   1        lcdCmd(0x01);     // Clear display
 423   1        msDelay(2);
 424   1        
 425   1      } // end lcdInit()
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 16:38:55 PAGE 8   

 426          
 427          // -------------------------------------------------------------- //
 428          
 429          void lcdClear( void ) {
 430   1        
 431   1        lcdCmd(0x01);     // Clear display
 432   1        msDelay(2);
 433   1        
 434   1      } // end lcdClear()
 435          
 436          // -------------------------------------------------------------- //
 437          
 438          void lcdChar( byte character ) {
 439   1        
 440   1        lcdData(character);   // send character
 441   1        
 442   1      } // end lcdChar()
 443          
 444          // -------------------------------------------------------------- //
 445          
 446          void lcdString( volatile char *string ) {
 447   1        
 448   1        int i = 0;
 449   1        while( string[i] != '`') {
 450   2          lcdChar( string[i] );
 451   2          i++;
 452   2        }
 453   1        
 454   1      } // end lcdString()
 455          
 456          // -------------------------------------------------------------- //
 457          
 458          void lcdLine( int line ) {
 459   1        
 460   1        switch (line) {
 461   2          case 1: {
 462   3            lcdCmd(0x80);
 463   3            break;
 464   3          }
 465   2          case 2: {
 466   3            lcdCmd(0xC0);
 467   3            break;
 468   3          }
 469   2          case 3: {
 470   3            lcdCmd(0x94);
 471   3            break;
 472   3          }
 473   2          case 4: {
 474   3            lcdCmd(0xD4);
 475   3            break;
 476   3          }
 477   2          default:
 478   2            lcdCmd(0x80);
 479   2          
 480   2        } // end switch
 481   1        
 482   1      } // end lcdLine()
 483          
 484          // -------------------------------------------------------------- //
 485          
 486          void msDelay( unsigned msecs ) {
 487   1        
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 16:38:55 PAGE 9   

 488   1        unsigned i;
 489   1        unsigned char j;
 490   1        
 491   1        msecs = msecs * 3.23;
 492   1        
 493   1        for(i=0;i<msecs;i++){
 494   2          for(j=0;j<100;j++);
 495   2        }
 496   1        
 497   1      } // end msDelay()
 498          
 499          // -------------------------------------------------------------- //
 500          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    885    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      73
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
