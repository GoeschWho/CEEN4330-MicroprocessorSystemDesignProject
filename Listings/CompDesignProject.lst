C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE COMPDESIGNPROJECT
OBJECT MODULE PLACED IN .\Objects\CompDesignProject.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE CompDesignProject.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\CompDe
                    -signProject.lst) OBJECT(.\Objects\CompDesignProject.obj)

line level    source

   1          /* Auth: Megan Bird
   2           * File: CompDesignProject.c
   3           * Course: CEEN-4330 – Microprocessor System Design – University of Nebraska-Lincoln
   4           * Lab: Project
   5           * Date: 3/14/2017
   6           * Desc: 8051 program with ROM, RAM, and I/O
   7           */
   8           
   9          #include <REGX55.H>
  10          #include <stdio.h>
  11          #include <absacc.h>
  12          
  13          // P1
  14          sbit P1_0 = P1^0;
  15          sbit P1_1 = P1^1;
  16          
  17          // P3
  18          sbit P3_0 = P3^0;
  19          sbit P3_1 = P3^1;
  20          sbit P3_2 = P3^2;
  21          sbit P3_3 = P3^3;
  22          sbit P3_4 = P3^4;
  23          sbit P3_5 = P3^5;
  24          sbit P3_6 = P3^6;
  25          sbit P3_7 = P3^7;
  26          
  27          // Keypad
  28          sbit kCol1  = P1^7;
  29          sbit kCol2  = P1^6;
  30          sbit kCol3  = P1^5;
  31          sbit kCol4  = P1^4;
  32          sbit kRow1  = P1^3;
  33          sbit kRow2  = P1^2;
  34          sbit kRow3  = P1^1;
  35          sbit kRow4  = P1^0;
  36          sbit cs_keypad = P3^1;          // latch
  37          sbit oe_keypad = P3^2;
  38          
  39          // Seven-Segment Display
  40          sfr sevenSegPort = 0x90;
  41          sbit cs_sevenSeg = P3^0;        // latch
  42          
  43          // LCD
  44          sbit cs_lcd = P3^3;                             // latch
  45          sbit rs_lcd = P3^4;                             // reg select
  46          sbit e_lcd  = P3^5;                             // enable
  47          // rw tied to ground to always enable read
  48          sfr lcdPort = 0x90;
  49          
  50          // ADC
  51          sbit oe_adc = P3^3;                             // latch output enable
  52          sbit wr_adc = P3^4;                             // WR line of ADC
  53          sfr adcPort = 0x90;
  54          
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 2   

  55          // RTC
  56          sbit rtc_data0 = P1^0;
  57          sbit rtc_data1 = P1^1;
  58          sbit rtc_data2 = P1^2;
  59          sbit rtc_data3 = P1^3;
  60          sbit rtc_add0 = P1^4;
  61          sbit rtc_add1 = P1^5;
  62          sbit rtc_add2 = P1^6;
  63          sbit rtc_add3 = P1^7;
  64          sfr rtcPort = 0x90;
  65          
  66          // Mission Control
  67          enum {ctrl_off,
  68                                  ctrl_ss_latch,
  69                                  ctrl_kp_oe,
  70                                  ctrl_kp_oelatch,
  71                                  ctrl_lcd_cmd_start,
  72                                  ctrl_lcd_cmd_finish,
  73                                  ctrl_lcd_data_start,
  74                                  ctrl_lcd_data_finish };
  75          
  76          enum {ctrl_adc_start = 1,
  77                                  ctrl_rtc_rd,
  78                                  ctrl_adc_finish,
  79                                  ctrl_rtc_cs1,
  80                                  ctrl_rtc_cs0 = 6,
  81                                  ctrl_rtc_wr };
  82          
  83          sbit dec0 = P3^0;
  84          sbit dec1 = P3^1;               
  85          sbit dec2 = P3^2;
  86          sbit dec3 = P3^3;
  87          sbit dec4 = P3^4;
  88          sbit dec5 = P3^5;
  89          
  90          // Menus
  91          
  92          enum {  menu_main,
  93                          menu_memory,
  94                          menu_io };
  95          
  96          // ======================= prototypes =========================== //
  97          
  98          typedef unsigned char byte;
  99          typedef unsigned short word;
 100          typedef enum { false, true } bool;
 101          
 102          struct keypad_data {
 103                  bool k1;
 104                  bool k2;
 105                  bool k3;
 106                  bool k4;
 107                  bool k5;
 108                  bool k6;
 109                  bool k7;
 110                  bool k8;
 111                  bool k9;
 112                  bool k0;
 113                  bool kA;
 114                  bool kB;
 115                  bool kC;
 116                  bool kD;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 3   

 117                  bool kstar;
 118                  bool kpound;
 119          };
 120          
 121          struct time_data {
 122                  byte seconds;
 123                  byte minutes;
 124                  byte hours;
 125                  byte days;
 126                  byte months;
 127                  byte years;
 128                  byte week;
 129          };
 130          
 131          //------- high level prototyeps -------//
 132          void mainMenu( void );
 133          void memoryMenu( void );
 134          void ioMenu( void );
 135          void dumpMenu( void );
 136          void tempMenu( void );
 137          void sevenSegMenu( void );
 138          void timeMenu( void );
 139          
 140          word input4Hex( void );
 141          word inputHex( void );
 142          void waitForKeyRelease( void );
 143          
 144          //------- driver prototypes -------//
 145          void latchSevenSeg( void );
 146          void latchKeypad( void );
 147          void outputSevenSeg( char character );
 148          struct keypad_data getKeysPressed( void );
 149          void displayKeyPressed( struct keypad_data keypad );
 150          
 151          void lcdCmd( byte cmd );
 152          void lcdData( byte dat );
 153          void lcdInit( void );
 154          void lcdClear( void );
 155          void lcdChar( byte character );
 156          void lcdString( volatile char *string );
 157          void lcdLine( int line );
 158          void lcdHexWord( word hex );
 159          void lcdHexByte( byte hex );
 160          void lcdAsciiByte( byte hex );
 161          
 162          float getTemp( void );
 163          
 164          void rtcInit( void );
 165          void rtcBusy( void );
 166          void rtcWrite( byte duhdata );
 167          byte rtcRead( byte duhaddress );
 168          void rtcRegWrite( byte duhstuff );
 169          byte rtcRegRead( byte duhstuff );
 170          void rtcSetTime( struct time_data time );
 171          struct time_data rtcGetTime( void );
 172          void rtcPrintTime( struct time_data *time );
 173          
 174          void missionControl1( int dec );
 175          void missionControl2( int dec );
 176          void msDelay( unsigned msecs );
 177          
 178          // ======================== main ================================ //
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 4   

 179          
 180          void main(void) {
 181   1              
 182   1              missionControl1( ctrl_off );
 183   1              missionControl2( ctrl_off );
 184   1              
 185   1              lcdInit();
 186   1              rtcInit();
 187   1      
 188   1              mainMenu();             // Enter main program
 189   1      
 190   1              while(1); // Stay off the streets
 191   1      
 192   1      } // end main()
 193          
 194          // ======================= functions ============================ //
 195          
 196          void mainMenu( void ) { 
 197   1      
 198   1              struct keypad_data keypad;
 199   1      
 200   1              while(1) {
 201   2      
 202   2                      char MenuStr1[] = "Megan Bird CEEN 4330`";
 203   2                      char MenuStr2[] = "--------------------`";
 204   2                      char MenuStr3[] = "Main Menu`";
 205   2                      char MenuStr4[] = "1 : Memory   2 : I/O`";
 206   2              
 207   2                      lcdClear();
 208   2                      lcdString( &MenuStr1 );
 209   2                      lcdLine(2);
 210   2                      lcdString( &MenuStr2 );
 211   2                      lcdLine(3);
 212   2                      lcdString( &MenuStr3 );
 213   2                      lcdLine(4);
 214   2                      lcdString( &MenuStr4 );
 215   2              
 216   2                      while(1) {      
 217   3                              keypad = getKeysPressed();
 218   3                      
 219   3                              if( keypad.k1 == true ) {
 220   4                                      waitForKeyRelease();
 221   4                                      memoryMenu();
 222   4                                      break;
 223   4                              }
 224   3                              else if( keypad.k2 == true ) {
 225   4                                      waitForKeyRelease();
 226   4                                      ioMenu();
 227   4                                      break;
 228   4                              }
 229   3                      } // end option while
 230   2      
 231   2              } // end main while
 232   1      
 233   1      } // end choiceMainMenu()
 234          
 235          // -------------------------------------------------------------- //
 236          
 237          void memoryMenu( void ) {
 238   1      
 239   1              struct keypad_data keypad;
 240   1              bool exit = false;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 5   

 241   1      
 242   1              while( exit == false ) {
 243   2      
 244   2                      char MenuStr1[] = "Memory Menu`";
 245   2                      char MenuStr2[] = "1 : Dump    2 : Move`";
 246   2                      char MenuStr3[] = "3 : Edit    4 : Find`";
 247   2                      char MenuStr4[] = "# : Return to Main  `";
 248   2              
 249   2                      lcdClear();
 250   2                      lcdString( &MenuStr1 );
 251   2                      lcdLine(2);
 252   2                      lcdString( &MenuStr2 );
 253   2                      lcdLine(3);
 254   2                      lcdString( &MenuStr3 );
 255   2                      lcdLine(4);
 256   2                      lcdString( &MenuStr4 );
 257   2              
 258   2                      while(1) {      
 259   3                              keypad = getKeysPressed();
 260   3                      
 261   3                              if( keypad.kpound == true ) {
 262   4                                      exit = true;
 263   4                                      waitForKeyRelease();
 264   4                                      break;
 265   4                              }
 266   3                              else if( keypad.k1 == true ) {
 267   4                                      waitForKeyRelease();
 268   4                                      dumpMenu();
 269   4                                      break;
 270   4                              }
 271   3                              else if( keypad.k2 == true ) {
 272   4                                      waitForKeyRelease();
 273   4                                      lcdChar('2');
 274   4                                      msDelay(2000);
 275   4                                      break;
 276   4                              }
 277   3                              else if( keypad.k3 == true ) {
 278   4                                      waitForKeyRelease();
 279   4                                      lcdChar('3');
 280   4                                      msDelay(2000);
 281   4                                      break;
 282   4                              }
 283   3                              else if( keypad.k4 == true ) {
 284   4                                      waitForKeyRelease();
 285   4                                      lcdChar('4');
 286   4                                      msDelay(2000);
 287   4                                      break;
 288   4                              }
 289   3                      } // end option while
 290   2      
 291   2              } // end main while
 292   1      
 293   1      } // end memoryMenu()
 294          
 295          // -------------------------------------------------------------- //
 296          
 297          void ioMenu( void ) {
 298   1      
 299   1              struct keypad_data keypad;
 300   1              bool exit = false;
 301   1      
 302   1              while( exit == false ) {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 6   

 303   2      
 304   2                      char MenuStr1[] = "I/O Menu`";
 305   2                      char MenuStr2[] = "1 : Temp    2 : 7Seg`";
 306   2                      char MenuStr3[] = "3 : Time    4 : SetT`";
 307   2                      char MenuStr4[] = "# : Return to Main  `";
 308   2              
 309   2                      lcdClear();
 310   2                      lcdString( &MenuStr1 );
 311   2                      lcdLine(2);
 312   2                      lcdString( &MenuStr2 );
 313   2                      lcdLine(3);
 314   2                      lcdString( &MenuStr3 );
 315   2                      lcdLine(4);
 316   2                      lcdString( &MenuStr4 );
 317   2              
 318   2                      while(1) {      
 319   3                              keypad = getKeysPressed();
 320   3                      
 321   3                              if( keypad.kpound == true ) {
 322   4                                      exit = true;
 323   4                                      waitForKeyRelease();
 324   4                                      break;
 325   4                              }
 326   3                              else if( keypad.k1 == true ) {
 327   4                                      waitForKeyRelease();
 328   4                                      tempMenu();
 329   4                                      break;
 330   4                              }
 331   3                              else if( keypad.k2 == true ) {
 332   4                                      waitForKeyRelease();
 333   4                                      sevenSegMenu();
 334   4                                      break;
 335   4                              }
 336   3                              else if( keypad.k3 == true ) {
 337   4                                      waitForKeyRelease();
 338   4                                      timeMenu();
 339   4                                      break;
 340   4                              }
 341   3                              else if( keypad.k4 == true ) {
 342   4                                      waitForKeyRelease();
 343   4                                      lcdChar('4');
 344   4                                      msDelay(2000);
 345   4                                      break;
 346   4                              }
 347   3                      } // end option while
 348   2      
 349   2              } // end main while
 350   1      
 351   1      } // end ioMenu()
 352          
 353          // -------------------------------------------------------------- //
 354          
 355          void dumpMenu( void ) {
 356   1      
 357   1              struct keypad_data keypad;
 358   1              bool exit;
 359   1              word segment;
 360   1              word block;
 361   1              word offset;
 362   1              byte memVal;
 363   1              int i;
 364   1              
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 7   

 365   1              char MenuStr1[] = "Dump Setup`";
 366   1              char MenuStr2[] = "Start Addr: `";
 367   1              char MenuStr3[] = "Block Size: `";
 368   1              char MenuStr4[] = "1:<--  2:-->  #:Exit`";
 369   1      
 370   1              exit = false;
 371   1              segment = 0x0000;
 372   1              block = 0xFFFF;
 373   1              offset = 0x0000;
 374   1      
 375   1              //----------------//
 376   1              //   Dump Setup   //
 377   1              //----------------//
 378   1      
 379   1              // print header and footer
 380   1              lcdClear();
 381   1              lcdString( &MenuStr1 );
 382   1      
 383   1              // address prompt
 384   1              lcdLine(3);
 385   1              lcdString( &MenuStr2 );
 386   1              // read 4 hex digits from keypad
 387   1              segment = input4Hex(); 
 388   1      
 389   1              // block size prompt
 390   1              lcdLine(4);
 391   1              lcdString( &MenuStr3 );
 392   1              // read 4 hex digits from keypad
 393   1              block = input4Hex();
 394   1      
 395   1              //------------------//
 396   1              //   Dump Display   //
 397   1              //------------------//
 398   1      
 399   1              while( exit == false ) {
 400   2      
 401   2                      // print segment:offset
 402   2                      lcdClear();
 403   2                      lcdHexWord( segment );
 404   2                      lcdChar(':');
 405   2                      lcdHexWord( offset );
 406   2      
 407   2                      // print hex values
 408   2                      lcdLine(2);
 409   2                      for( i = 0; i < 7; i++ ) {
 410   3                              if( (offset + i) < block ) {
 411   4                                      memVal = XBYTE[ (segment * 16) + offset + i ]; // get seg:offset+i
 412   4                                      lcdHexByte( memVal );   // print value
 413   4                                      if( i < 6 ) {
 414   5                                              lcdChar(' ');           // print space if not last one on line
 415   5                                      }
 416   4                              }
 417   3                      }
 418   2      
 419   2                      // print ascii values
 420   2                      lcdLine(3);
 421   2                      for( i = 0; i < 7; i++ ) {
 422   3                              if( (offset + i) < block ) {
 423   4                                      memVal = XBYTE[ (segment * 16) + offset + i ]; // get seg:offset+i
 424   4                                      lcdAsciiByte( memVal ); // print value
 425   4                                      lcdChar(' ');
 426   4                                      if( i < 6 ) {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 8   

 427   5                                              lcdChar(' ');           // print space if not last one on line
 428   5                                      }
 429   4                              }
 430   3                      }
 431   2      
 432   2                      // print footer
 433   2                      lcdLine(4);
 434   2                      lcdString( &MenuStr4 );         
 435   2                              
 436   2                      while(1) {      
 437   3                              keypad = getKeysPressed();
 438   3                      
 439   3                              if( keypad.kpound == true ) {
 440   4                                      exit = true;
 441   4                                      waitForKeyRelease();
 442   4                                      break;
 443   4                              }
 444   3                              else if( keypad.k1 == true ) {
 445   4                                      waitForKeyRelease();
 446   4                                      // if decremented offset is less than start (0),
 447   4                                      if( offset >= 7 ) {
 448   5                                              //      revert (-7) and do nothing
 449   5                                              offset -= 7;
 450   5                                      }
 451   4                                      break;
 452   4                              }
 453   3                              else if( keypad.k2 == true ) {
 454   4                                      waitForKeyRelease();
 455   4                                      // increment offset by 7
 456   4                                      offset += 7;
 457   4                                      // if incremented offset is past block size,
 458   4                                      if( offset > block ) {
 459   5                                              //      revert (-7) and do nothing
 460   5                                              offset -= 7;
 461   5                                      }
 462   4                                      break;
 463   4                              }
 464   3                      } // end option while
 465   2      
 466   2              } // end main while
 467   1      
 468   1      } // end dumpMenu()
 469          
 470          // -------------------------------------------------------------- //
 471          
 472          void tempMenu( void ) {
 473   1      
 474   1              struct keypad_data keypad;
 475   1              bool exit = false;
 476   1              int i = 0;
 477   1      
 478   1              while( exit == false ) {
 479   2      
 480   2                      char MenuStr1[] = "Current Temperature`";
 481   2                      char MenuStr2[] = "+00.0 F`";
 482   2                      //char MenuStr3[] = " `";
 483   2                      char MenuStr4[] = "# : Return to I/O   `";
 484   2              
 485   2                      lcdClear();
 486   2                      lcdString( &MenuStr1 );
 487   2      
 488   2                      lcdLine(2);
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 9   

 489   2                      sprintf( MenuStr2, "%+5.1f F`", getTemp() );
 490   2                      lcdString( &MenuStr2 );
 491   2      
 492   2                      //lcdLine(3);
 493   2                      //lcdString( &MenuStr3 );
 494   2                      lcdLine(4);
 495   2                      lcdString( &MenuStr4 );
 496   2              
 497   2                      while(1) {      
 498   3      
 499   3                              // slow LCD temp refresh rate down
 500   3                              if ( i == 1000 ) {
 501   4                                      lcdLine(2);
 502   4                                      sprintf( MenuStr2, "%+5.1f F`", getTemp() );
 503   4                                      lcdString( &MenuStr2 );
 504   4                                      i = 0;
 505   4                              }
 506   3                              else {
 507   4                                      i++;
 508   4                              }
 509   3      
 510   3                              keypad = getKeysPressed();
 511   3                      
 512   3                              if( keypad.kpound == true ) {
 513   4                                      exit = true;
 514   4                                      waitForKeyRelease();
 515   4                                      break;
 516   4                              }
 517   3      
 518   3                      } // end option while
 519   2      
 520   2              } // end main while
 521   1      
 522   1      } // end tempMenu()
 523          
 524          // -------------------------------------------------------------- //
 525          
 526          void sevenSegMenu( void ) {
 527   1      
 528   1              struct keypad_data keypad;
 529   1              bool exit = false;
 530   1              int i = 0;
 531   1      
 532   1              while( exit == false ) {
 533   2      
 534   2                      char MenuStr1[] = "Seven Segment`";
 535   2                      char MenuStr2[] = "Display Demo`";
 536   2                      //char MenuStr3[] = " `";
 537   2                      char MenuStr4[] = "# : Return to I/O`";
 538   2              
 539   2                      lcdClear();
 540   2                      lcdString( &MenuStr1 );
 541   2      
 542   2                      lcdLine(2);
 543   2                      lcdString( &MenuStr2 );
 544   2      
 545   2                      //lcdLine(3);
 546   2                      //lcdString( &MenuStr3 );
 547   2                      lcdLine(4);
 548   2                      lcdString( &MenuStr4 );
 549   2              
 550   2                      while(1) {      
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 10  

 551   3      
 552   3                              keypad = getKeysPressed();
 553   3                      
 554   3                              if( keypad.kpound == true ) {
 555   4                                      exit = true;
 556   4                                      outputSevenSeg('o'); // Turn display off when exiting
 557   4                                      waitForKeyRelease();
 558   4                                      break;
 559   4                              }
 560   3      
 561   3                              switch (i) {
 562   4                                      
 563   4                                      case 0: sevenSegPort = 0xFE; break;
 564   4                                      case 1: sevenSegPort = 0xFD; break;
 565   4                                      case 2: sevenSegPort = 0xFB; break;
 566   4                                      case 3: sevenSegPort = 0xF7; break;
 567   4                                      case 4: sevenSegPort = 0xEF; break;
 568   4                                      case 5: sevenSegPort = 0xDF; break;
 569   4                                      case 6: sevenSegPort = 0xBF; break;
 570   4                                      case 7: sevenSegPort = 0x7F; break;
 571   4                                      default: sevenSegPort = 0xFF; break;
 572   4      
 573   4                              } // end switch
 574   3      
 575   3                              if( i >= 7 ) {
 576   4                                      i = 0;
 577   4                              } else {
 578   4                                      i++;
 579   4                              }
 580   3      
 581   3                              latchSevenSeg();
 582   3                              msDelay(50);
 583   3      
 584   3                      } // end option while
 585   2      
 586   2              } // end main while
 587   1      
 588   1      } // end sevenSegMenu()
 589          
 590          // -------------------------------------------------------------- //
 591          
 592          void timeMenu( void ) {
 593   1      
 594   1              struct keypad_data keypad;
 595   1              bool exit = false;
 596   1              int i = 0;
 597   1              struct time_data time;
 598   1      
 599   1              while( exit == false ) {
 600   2      
 601   2                      char MenuStr1[] = "Real Time Clock`";
 602   2                      //char MenuStr2[] = "<Time>`";
 603   2                      //char MenuStr3[] = " `";
 604   2                      char MenuStr4[] = "# : Return to I/O   `";
 605   2              
 606   2                      lcdClear();
 607   2                      lcdString( &MenuStr1 );
 608   2      
 609   2                      lcdLine(2);
 610   2                      time = rtcGetTime();
 611   2                      rtcPrintTime( &time );
 612   2      
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 11  

 613   2                      //lcdLine(3);
 614   2                      //lcdString( &MenuStr3 );
 615   2                      lcdLine(4);
 616   2                      lcdString( &MenuStr4 );
 617   2              
 618   2                      while(1) {      
 619   3      
 620   3                              // slow LCD time refresh rate down
 621   3                              if ( i == 1000 ) {
 622   4                                      lcdLine(2);
 623   4                                      time = rtcGetTime();
 624   4                                      rtcPrintTime( &time );
 625   4                                      i = 0;
 626   4                              }
 627   3                              else {
 628   4                                      i++;
 629   4                              }
 630   3      
 631   3                              keypad = getKeysPressed();
 632   3                      
 633   3                              if( keypad.kpound == true ) {
 634   4                                      exit = true;
 635   4                                      waitForKeyRelease();
 636   4                                      break;
 637   4                              }
 638   3      
 639   3                      } // end option while
 640   2      
 641   2              } // end main while
 642   1      
 643   1      } // end timeMenu()
 644          
 645          // -------------------------------------------------------------- //
 646          
 647          word input4Hex( void ) {
 648   1      
 649   1              word segment;
 650   1              word input;
 651   1              int i;
 652   1              
 653   1              segment = 0x0000;
 654   1      
 655   1              for( i = 0; i < 4; i++ ) {
 656   2                      segment = segment << 4;
 657   2                      input = inputHex();
 658   2                      segment = segment + input;
 659   2              }
 660   1         
 661   1              return segment;
 662   1      
 663   1      } // end read4Hex()
 664          
 665          // -------------------------------------------------------------- //
 666          
 667          word inputHex( void ) {
 668   1      
 669   1              struct keypad_data keypad;
 670   1              word value;
 671   1              byte ascii;
 672   1              
 673   1              
 674   1              value = 0xFFFF;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 12  

 675   1              ascii = 0x7E;
 676   1              
 677   1              while( value == 0xFFFF ) {
 678   2                
 679   2                      keypad = getKeysPressed();
 680   2      
 681   2                      if( keypad.k0 == true ) {
 682   3                              value = 0x0000;
 683   3                              ascii = 0x30;
 684   3                      }
 685   2                      if( keypad.k1 == true ) {
 686   3                              value = 0x0001;
 687   3                              ascii = 0x31;
 688   3                      }
 689   2                      if( keypad.k2 == true ) {
 690   3                              value = 0x0002;
 691   3                              ascii = 0x32;
 692   3                      }
 693   2                      if( keypad.k3 == true ) {
 694   3                              value = 0x0003;
 695   3                              ascii = 0x33;
 696   3                      }
 697   2                      if( keypad.k4 == true ) {
 698   3                              value = 0x0004;
 699   3                              ascii = 0x34;
 700   3                      }
 701   2                      if( keypad.k5 == true ) {
 702   3                              value = 0x0005;
 703   3                              ascii = 0x35;
 704   3                      }
 705   2                      if( keypad.k6 == true ) {
 706   3                              value = 0x0006;
 707   3                              ascii = 0x36;
 708   3                      }
 709   2                      if( keypad.k7 == true ) {
 710   3                              value = 0x0007;
 711   3                              ascii = 0x37;
 712   3                      }
 713   2                      if( keypad.k8 == true ) {
 714   3                              value = 0x0008;
 715   3                              ascii = 0x38;
 716   3                      }
 717   2                      if( keypad.k9 == true ) {
 718   3                              value = 0x0009;
 719   3                              ascii = 0x39;
 720   3                      }
 721   2                      if( keypad.kA == true ) {
 722   3                              value = 0x000A;
 723   3                              ascii = 0x41;
 724   3                      }
 725   2                      if( keypad.kB == true ) {
 726   3                              value = 0x000B;
 727   3                              ascii = 0x42;
 728   3                      }
 729   2                      if( keypad.kC == true ) {
 730   3                              value = 0x000C;
 731   3                              ascii = 0x43;
 732   3                      }
 733   2                      if( keypad.kD == true ) {
 734   3                              value = 0x000D;
 735   3                              ascii = 0x44;
 736   3                      }
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 13  

 737   2                      if( keypad.kstar == true ) {
 738   3                              value = 0x000E;
 739   3                              ascii = 0x45;
 740   3                      }
 741   2                      if( keypad.kpound == true ) {
 742   3                              value = 0x000F;
 743   3                              ascii = 0x46;
 744   3                      }
 745   2      
 746   2              } // end while
 747   1      
 748   1              lcdChar( ascii );
 749   1      
 750   1              waitForKeyRelease();
 751   1              return value;   
 752   1      
 753   1      } // end readHex()
 754          
 755          // -------------------------------------------------------------- //
 756          
 757          void waitForKeyRelease( void ) {
 758   1      
 759   1              struct keypad_data keypad;
 760   1              bool exit = false;
 761   1              
 762   1              while( exit == false ) {
 763   2      
 764   2                      exit = true;
 765   2                      keypad = getKeysPressed();
 766   2      
 767   2                      if( keypad.k0 == true ) {
 768   3                              exit = false;
 769   3                      }
 770   2                      if( keypad.k1 == true ) {
 771   3                              exit = false;
 772   3                      }
 773   2                      if( keypad.k2 == true ) {
 774   3                              exit = false;
 775   3                      }
 776   2                      if( keypad.k3 == true ) {
 777   3                              exit = false;
 778   3                      }
 779   2                      if( keypad.k4 == true ) {
 780   3                              exit = false;
 781   3                      }
 782   2                      if( keypad.k5 == true ) {
 783   3                              exit = false;
 784   3                      }
 785   2                      if( keypad.k6 == true ) {
 786   3                              exit = false;
 787   3                      }
 788   2                      if( keypad.k7 == true ) {
 789   3                              exit = false;
 790   3                      }
 791   2                      if( keypad.k8 == true ) {
 792   3                              exit = false;
 793   3                      }
 794   2                      if( keypad.k9 == true ) {
 795   3                              exit = false;
 796   3                      }
 797   2                      if( keypad.kA == true ) {
 798   3                              exit = false;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 14  

 799   3                      }
 800   2                      if( keypad.kB == true ) {
 801   3                              exit = false;
 802   3                      }
 803   2                      if( keypad.kC == true ) {
 804   3                              exit = false;
 805   3                      }
 806   2                      if( keypad.kD == true ) {
 807   3                              exit = false;
 808   3                      }
 809   2                      if( keypad.kstar == true ) {
 810   3                              exit = false;
 811   3                      }
 812   2                      if( keypad.kpound == true ) {
 813   3                              exit = false;
 814   3                      }
 815   2      
 816   2              } // end while    
 817   1      
 818   1      } // end waitForKeyRelease()
 819          
 820          // -------------------------------------------------------------- //
 821          
 822          void latchSevenSeg( void ) {
 823   1              
 824   1      //      cs_sevenSeg = 1;
 825   1      //      cs_sevenSeg = 0;
 826   1              
 827   1              missionControl1( ctrl_ss_latch );
 828   1              missionControl1( ctrl_off );
 829   1              
 830   1      } // end latchSevenSeg()
 831          
 832          // -------------------------------------------------------------- //
 833          
 834          void latchKeypad( void ) {
 835   1              
 836   1      //      cs_keypad = 1;
 837   1      //      cs_keypad = 0;
 838   1              
 839   1              missionControl1( ctrl_kp_oelatch );
 840   1              missionControl1( ctrl_kp_oe );
 841   1              
 842   1      } // end latchKeypad()
 843          
 844          // -------------------------------------------------------------- //
 845          
 846          //void latchLCD( void ) {
 847          //      
 848          //      cs_lcd = 1;
 849          //      cs_lcd = 0;
 850          //      
 851          //} // end latchLCD()
 852          
 853          // -------------------------------------------------------------- //
 854          
 855          void outputSevenSeg( char character ) {
 856   1              
 857   1              switch( character ) {
 858   2                      case '0': sevenSegPort = ~0x3F; break;
 859   2                      case '1': sevenSegPort = ~0x06; break;
 860   2                      case '2': sevenSegPort = ~0x5B; break;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 15  

 861   2                      case '3': sevenSegPort = ~0x4F; break;
 862   2                      case '4': sevenSegPort = ~0x66; break;
 863   2                      case '5': sevenSegPort = ~0x6D; break;
 864   2                      case '6': sevenSegPort = ~0x7D; break;
 865   2                      case '7': sevenSegPort = ~0x07; break;
 866   2                      case '8': sevenSegPort = ~0x7F; break;
 867   2                      case '9': sevenSegPort = ~0x67; break;
 868   2                      case 'A': sevenSegPort = ~0x77; break;
 869   2                      case 'b': sevenSegPort = ~0x7C; break;
 870   2                      case 'C': sevenSegPort = ~0x39; break;
 871   2                      case 'd': sevenSegPort = ~0x5E; break;
 872   2                      case 'E': sevenSegPort = ~0x79; break;
 873   2                      case 'F': sevenSegPort = ~0x71; break;
 874   2                      case '-': sevenSegPort = 0xBF;  break;
 875   2                      case '.': sevenSegPort = 0x7F;  break;
 876   2                      case 'o': sevenSegPort = 0xFF;  break;  // off
 877   2                      default:  sevenSegPort = 0xAA;                                  // invalid
 878   2              }
 879   1              
 880   1              latchSevenSeg();
 881   1              
 882   1      } // end outputSevenSeg()
 883          
 884          // -------------------------------------------------------------- //
 885          
 886          struct keypad_data getKeysPressed( void ) {
 887   1              
 888   1              struct keypad_data keypad;
 889   1              
 890   1              // enable keypad latch output
 891   1              //oe_keypad = 0;
 892   1              missionControl1( ctrl_kp_oe );
 893   1              
 894   1              // Set keypad columns as outputs & rows as inputs
 895   1              kCol1 = 0;
 896   1              kCol2 = 0;
 897   1              kCol3 = 0;
 898   1              kCol4 = 0;
 899   1              kRow1 = 1;
 900   1              kRow2 = 1;
 901   1              kRow3 = 1;
 902   1              kRow4 = 1;
 903   1              
 904   1              // scan by columns
 905   1      
 906   1              // column 1
 907   1              kCol1 = 0;
 908   1              kCol2 = 1;
 909   1              kCol3 = 1;
 910   1              kCol4 = 1;
 911   1              latchKeypad();
 912   1              
 913   1              if (kRow1 == 0) {
 914   2                      keypad.k1 = 1;
 915   2              }
 916   1              else {
 917   2                      keypad.k1 = 0;
 918   2              }
 919   1              if (kRow2 == 0) {
 920   2                      keypad.k4 = 1;
 921   2              }
 922   1              else {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 16  

 923   2                      keypad.k4 = 0;
 924   2              }
 925   1              if (kRow3 == 0) {
 926   2                      keypad.k7 = 1;
 927   2              }
 928   1              else {
 929   2                      keypad.k7 = 0;
 930   2              }
 931   1              if (kRow4 == 0) {
 932   2                      keypad.kstar = 1;
 933   2              }
 934   1              else {
 935   2                      keypad.kstar = 0;
 936   2              }
 937   1              kCol1 = 1;
 938   1              
 939   1              // column 2
 940   1              kCol2 = 0;
 941   1              latchKeypad();
 942   1              
 943   1              if (kRow1 == 0) {
 944   2                      keypad.k2 = 1;
 945   2              }
 946   1              else {
 947   2                      keypad.k2 = 0;
 948   2              }
 949   1              if (kRow2 == 0) {
 950   2                      keypad.k5 = 1;
 951   2              }
 952   1              else {
 953   2                      keypad.k5 = 0;
 954   2              }
 955   1              if (kRow3 == 0) {
 956   2                      keypad.k8 = 1;
 957   2              }
 958   1              else {
 959   2                      keypad.k8 = 0;
 960   2              }
 961   1              if (kRow4 == 0) {
 962   2                      keypad.k0 = 1;
 963   2              }
 964   1              else {
 965   2                      keypad.k0 = 0;
 966   2              }
 967   1              kCol2 = 1;
 968   1              
 969   1              // column 3
 970   1              kCol3 = 0;
 971   1              latchKeypad();
 972   1              
 973   1              if (kRow1 == 0) {
 974   2                      keypad.k3 = 1;
 975   2              }
 976   1              else {
 977   2                      keypad.k3 = 0;
 978   2              }
 979   1              if (kRow2 == 0) {
 980   2                      keypad.k6 = 1;
 981   2              }
 982   1              else {
 983   2                      keypad.k6 = 0;
 984   2              }
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 17  

 985   1              if (kRow3 == 0) {
 986   2                      keypad.k9 = 1;
 987   2              }
 988   1              else {
 989   2                      keypad.k9 = 0;
 990   2              }
 991   1              if (kRow4 == 0) {
 992   2                      keypad.kpound = 1;
 993   2              }
 994   1              else {
 995   2                      keypad.kpound = 0;
 996   2              }
 997   1              kCol3 = 1;
 998   1              
 999   1              // column 4
1000   1              kCol4 = 0;
1001   1              latchKeypad();
1002   1              
1003   1              if (kRow1 == 0) {
1004   2                      keypad.kA = 1;
1005   2              }
1006   1              else {
1007   2                      keypad.kA = 0;
1008   2              }
1009   1              if (kRow2 == 0) {
1010   2                      keypad.kB = 1;
1011   2              }
1012   1              else {
1013   2                      keypad.kB = 0;
1014   2              }
1015   1              if (kRow3 == 0) {
1016   2                      keypad.kC = 1;
1017   2              }
1018   1              else {
1019   2                      keypad.kC = 0;
1020   2              }
1021   1              if (kRow4 == 0) {
1022   2                      keypad.kD = 1;
1023   2              }
1024   1              else {
1025   2                      keypad.kD = 0;
1026   2              }
1027   1              kCol4 = 1;
1028   1              latchKeypad();
1029   1              
1030   1              // disable keypad latch output
1031   1              //oe_keypad = 1;
1032   1              missionControl1( ctrl_off );
1033   1              
1034   1              return keypad; 
1035   1              
1036   1      } // end getKeysPressed()
1037          
1038          // -------------------------------------------------------------- //
1039          
1040          void displayKeyPressed( struct keypad_data keypad ) {
1041   1              
1042   1              if ( keypad.k1 == 1 ) {
1043   2                      outputSevenSeg('1');
1044   2              }
1045   1              else if ( keypad.k2 == 1 ) {
1046   2                      outputSevenSeg('2');
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 18  

1047   2              }
1048   1              else if ( keypad.k3 == 1 ) {
1049   2                      outputSevenSeg('3');
1050   2              }
1051   1              else if ( keypad.k4 == 1 ) {
1052   2                      outputSevenSeg('4');
1053   2              }
1054   1              else if ( keypad.k5 == 1 ) {
1055   2                      outputSevenSeg('5');
1056   2              }
1057   1              else if ( keypad.k6 == 1 ) {
1058   2                      outputSevenSeg('6');
1059   2              }
1060   1              else if ( keypad.k7 == 1 ) {
1061   2                      outputSevenSeg('7');
1062   2              }
1063   1              else if ( keypad.k8 == 1 ) {
1064   2                      outputSevenSeg('8');
1065   2              }
1066   1              else if ( keypad.k9 == 1 ) {
1067   2                      outputSevenSeg('9');
1068   2              }
1069   1              else if ( keypad.kA == 1 ) {
1070   2                      outputSevenSeg('A');
1071   2              }
1072   1              else if ( keypad.k0 == 1 ) {
1073   2                      outputSevenSeg('0');
1074   2              }
1075   1              else if ( keypad.kB == 1 ) {
1076   2                      outputSevenSeg('b');
1077   2              }
1078   1              else if ( keypad.kC == 1 ) {
1079   2                      outputSevenSeg('C');
1080   2              }
1081   1              else if ( keypad.kD == 1 ) {
1082   2                      outputSevenSeg('d');
1083   2              }
1084   1              else if ( keypad.kstar == 1 ) {
1085   2                      outputSevenSeg('.');
1086   2              }
1087   1              else if ( keypad.kpound == 1 ) {
1088   2                      outputSevenSeg('-');
1089   2              }
1090   1              else {
1091   2                      outputSevenSeg('o');
1092   2              }
1093   1              
1094   1      } // end displayKeyPressed()
1095                  
1096          // -------------------------------------------------------------- //
1097          
1098          void lcdCmd( byte cmd ) {
1099   1              
1100   1              //rs_lcd = 0;                   // reg select low for command
1101   1              // --- RW tied low for write --- //
1102   1              //e_lcd = 1;                    // E high for pulse
1103   1              
1104   1              missionControl1( ctrl_lcd_cmd_start );
1105   1              
1106   1              lcdPort = cmd;
1107   1              //latchLCD();
1108   1              
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 19  

1109   1              msDelay(1);                     // Need Tpw > 140 ns
1110   1              //e_lcd = 0;                    // E low to end pulse
1111   1              
1112   1              missionControl1( ctrl_lcd_cmd_finish );
1113   1              
1114   1      } // end lcdCmd()
1115          
1116          // -------------------------------------------------------------- //
1117          
1118          void lcdData( byte dat ) {
1119   1              
1120   1              //rs_lcd = 1;                   // reg select high for data
1121   1              // --- RW tied low for write --- //
1122   1              //e_lcd = 1;                    // E high for pulse
1123   1              
1124   1              missionControl1( ctrl_lcd_data_start );
1125   1              
1126   1              lcdPort = dat;
1127   1              //latchLCD();
1128   1              
1129   1              msDelay(1);                     // Need Tpw > 140 ns
1130   1              //e_lcd = 0;                    // E low to end pulse
1131   1              
1132   1              missionControl1( ctrl_lcd_data_finish );
1133   1              
1134   1      } // end lcdData()
1135          
1136          // -------------------------------------------------------------- //
1137          
1138          void lcdInit( void ) {  
1139   1              
1140   1              msDelay(50);
1141   1              lcdCmd(0x38);                   // Function set
1142   1              msDelay(5);
1143   1              lcdCmd(0x38);                   // Function set
1144   1              msDelay(1);
1145   1              lcdCmd(0x0F);                   // Display ON/OFF control
1146   1              msDelay(1);
1147   1              lcdCmd(0x01);                   // Clear display
1148   1              msDelay(2);
1149   1              
1150   1      } // end lcdInit()
1151          
1152          // -------------------------------------------------------------- //
1153          
1154          void lcdClear( void ) {
1155   1              
1156   1              lcdCmd(0x01);                   // Clear display
1157   1              msDelay(2);
1158   1              
1159   1      } // end lcdClear()
1160          
1161          // -------------------------------------------------------------- //
1162          
1163          void lcdChar( byte character ) {
1164   1              
1165   1              lcdData(character);             // send character
1166   1              
1167   1      } // end lcdChar()
1168          
1169          // -------------------------------------------------------------- //
1170          
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 20  

1171          void lcdString( volatile char *string ) {
1172   1              
1173   1              int i = 0;
1174   1              while( string[i] != '`') {
1175   2                      lcdChar( string[i] );
1176   2                      i++;
1177   2              }
1178   1              
1179   1      } // end lcdString()
1180          
1181          // -------------------------------------------------------------- //
1182          
1183          void lcdLine( int line ) {
1184   1              
1185   1              switch (line) {
1186   2                      case 1: {
1187   3                              lcdCmd(0x80);
1188   3                              break;
1189   3                      }
1190   2                      case 2: {
1191   3                              lcdCmd(0xC0);
1192   3                              break;
1193   3                      }
1194   2                      case 3: {
1195   3                              lcdCmd(0x94);
1196   3                              break;
1197   3                      }
1198   2                      case 4: {
1199   3                              lcdCmd(0xD4);
1200   3                              break;
1201   3                      }
1202   2                      default:
1203   2                              lcdCmd(0x80);
1204   2                      
1205   2              } // end switch
1206   1              
1207   1      } // end lcdLine()
1208          
1209          // -------------------------------------------------------------- //
1210          
1211          void lcdHexWord( word hex ) {
1212   1      
1213   1              char hexStr[] = "--------`";
1214   1      
1215   1              sprintf( hexStr, "%04X`", (int)hex );
1216   1              lcdString( &hexStr );
1217   1      
1218   1      } // end lcdHexWord()
1219          
1220          // -------------------------------------------------------------- //
1221          
1222          void lcdHexByte( byte hex ) {
1223   1      
1224   1              char hexStr[] = "-----`";
1225   1      
1226   1              sprintf( hexStr, "%02X`", (int)hex );
1227   1              lcdString( &hexStr );
1228   1      
1229   1      } // end lcdHexWord()
1230          
1231          // -------------------------------------------------------------- //
1232          
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 21  

1233          void lcdAsciiByte( byte hex ) {
1234   1      
1235   1      //      char hexStr[] = "-----`";
1236   1      //
1237   1      //      sprintf( hexStr, "%1c`", (int)hex );
1238   1      //      lcdString( &hexStr );
1239   1      
1240   1              lcdChar( hex );
1241   1      
1242   1      } // end lcdHexWord()
1243          
1244          // -------------------------------------------------------------- //
1245          
1246          float getTemp( void ) {
1247   1              
1248   1              //------------ IDEA ------------------------------------------//
1249   1              // change to pass in C or F and returns corresponding value.  //
1250   1              
1251   1              int i = 0;
1252   1              byte sample = 0;
1253   1              float voltage = 0;
1254   1              float degC = 0;
1255   1              float degF = 0;
1256   1              int degCint = 0;
1257   1      //      char tempCStr[] = "+00.0 C`";
1258   1      //      char tempFStr[] = "+00.0 F`";
1259   1      //      char voltStr[] = "+0.0 V`";
1260   1      //      char sampStr[] = "55555555`";
1261   1              
1262   1                      missionControl2( ctrl_adc_start );
1263   1                      missionControl2( ctrl_adc_finish );
1264   1                      sample = adcPort;
1265   1                      missionControl2( ctrl_off );
1266   1                      
1267   1                      // voltage reading in 0.3V higher than measured on board
1268   1                      voltage = sample * 5 / 256;
1269   1                      //voltage = voltage - 0.25;
1270   1                      degC = (voltage - 0.5) * 100;
1271   1                      degF = degC * (9.0/5.0) + 32.0;
1272   1                      
1273   1                      return degF;
1274   1                      
1275   1      //              sprintf( sampStr, "%c`", sample );
1276   1      //              sprintf( voltStr, "%+4.1f V`", voltage );
1277   1      //              sprintf( tempCStr, "%+5.1f C`", degC );
1278   1      //              sprintf( tempFStr, "%+5.1f F`", degF );
1279   1                      
1280   1      //              lcdLine(1);
1281   1      //              lcdString( &sampStr );
1282   1      //              lcdLine(2);
1283   1      //              lcdString( &voltStr );
1284   1      //              lcdLine(3);
1285   1      //              lcdString( &tempCStr );
1286   1      //              lcdLine(4);
1287   1      //              lcdString( &tempFStr );
1288   1              
1289   1      } // end getDegF()
1290          
1291          // -------------------------------------------------------------- //
1292          
1293          void rtcInit( void ) {
1294   1              
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 22  

1295   1              struct time_data time;
1296   1      
1297   1              time.week = 0;
1298   1              time.years = 17;
1299   1              time.months = 3;
1300   1              time.days = 26;
1301   1              time.hours = 12;
1302   1              time.minutes = 21;
1303   1              time.seconds = 0;
1304   1                      
1305   1              // (A)  Start the counter
1306   1              //                      Inititalize the control registers
1307   1              rtcWrite( 0xF4 );               // Set the CF register to 0100b = 4h
1308   1              rtcWrite( 0xD4 );               // Set the CD register to 0100b = 4h
1309   1              
1310   1              // (B)  Check the status of the BUSY bit
1311   1              rtcBusy();      
1312   1              
1313   1              // (C)  STOP and RESET the counter
1314   1              rtcWrite( 0xF7 );               // Set the CF register to 0111b = 7h
1315   1              
1316   1              // Set the current time in the registers
1317   1              //              (initizlize the S1 to W registers)
1318   1              rtcSetTime( time ); 
1319   1              
1320   1              // (A)  Start the counter and release the HOLD status
1321   1              rtcWrite( 0xF4 );               // Set the CF register to 0100b = 4h
1322   1              rtcWrite( 0xD5 );               // Set the CD register to 0101b = 5h
1323   1              
1324   1      } // end rtcInit()
1325          
1326          // -------------------------------------------------------------- //
1327          
1328          void rtcBusy( void ) {
1329   1              
1330   1              byte duhdata;
1331   1              
1332   1              rtcWrite( 0xD5 );                                               // Hold bit <- 1
1333   1              duhdata = rtcRead( 0x0D );      // Read from D to get BUSY// Read the BUSY bit
1334   1      
1335   1              // If BUSY bit = 0, cont., else HOLD bit <- 0
1336   1              while( duhdata & 0x02 == 2 ) {
1337   2                      rtcWrite( 0xD4 );                                               // HOLD bit <- 0
1338   2                      rtcWrite( 0xD5 );                                               // HOLD bit <- 1
1339   2                      duhdata = rtcRead( 0x0D );      // Read from D to get BUSY// Read the BUSY bit
1340   2              }       
1341   1              
1342   1      } // end rtcBusy()
1343          
1344          // -------------------------------------------------------------- //
1345          
1346          void rtcWrite( byte duhdata ) {
1347   1              
1348   1              missionControl2( ctrl_rtc_cs1 );        // set CS1 high
1349   1              rtcPort = duhdata;                                      // send duhdata
1350   1              missionControl2( ctrl_rtc_cs0 );        // set CS0 low
1351   1              missionControl2( ctrl_rtc_wr );         // set WR low
1352   1              missionControl2( ctrl_rtc_cs0 );        // set WR high
1353   1              missionControl2( ctrl_rtc_cs1 );        // set CS0 high
1354   1              missionControl2( ctrl_off );            // set CS1 low
1355   1              
1356   1      } // end rtcWrite()
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 23  

1357          
1358          // -------------------------------------------------------------- //
1359          
1360          byte rtcRead( byte duhaddress ) {
1361   1              
1362   1              byte duhdata = 0x00;
1363   1              
1364   1              duhaddress = duhaddress << 4;
1365   1              duhaddress = duhaddress | 0x0F;
1366   1              
1367   1              missionControl2( ctrl_rtc_cs1 );        // set CS1 high
1368   1              rtcPort = duhaddress;                           // send duhaddress
1369   1              missionControl2( ctrl_rtc_cs0 );        // set CS0 low
1370   1              missionControl2( ctrl_rtc_rd );         // set RD low
1371   1              duhdata = rtcPort;                                      // read duhdata
1372   1              duhdata &= 0x0F;                                        // mask upper nibble of value read in
1373   1              missionControl2( ctrl_rtc_cs0 );        // set RD high
1374   1              missionControl2( ctrl_rtc_cs1 );        // set CS0 high
1375   1              missionControl2( ctrl_off );            // set CS1 low
1376   1              
1377   1              return duhdata;
1378   1              
1379   1      } // end rtcRead()
1380          
1381          // -------------------------------------------------------------- //
1382          
1383          void rtcRegWrite( byte duhstuff ) {
1384   1              
1385   1              rtcBusy();
1386   1              rtcWrite( duhstuff );
1387   1              // HOLD bit <- 0 by rtcWrite when CS1 is cleared
1388   1              
1389   1      } // end rtcRegWrite()
1390          
1391          // -------------------------------------------------------------- //
1392          
1393          byte rtcRegRead( byte duhstuff ) {
1394   1              
1395   1              byte duhdata;
1396   1      
1397   1              rtcBusy();
1398   1              duhdata = rtcRead( duhstuff );
1399   1              // HOLD bit <- 0 by rtcWrite when CS1 is cleared
1400   1              return duhdata;
1401   1              
1402   1      } // end rtcRegWrite()
1403          
1404          // -------------------------------------------------------------- //
1405          
1406          void rtcSetTime( struct time_data time ) {
1407   1              
1408   1              byte s1, s10, mi1, mi10, h1, h10, d1, d10, mo1, mo10, y1, y10;
1409   1              
1410   1              // 1-second
1411   1              s1 = time.seconds % 10;
1412   1              rtcRegWrite( 0x00 | s1 );
1413   1              
1414   1              // 10-second
1415   1              s10 = time.seconds / 10;
1416   1              rtcRegWrite( 0x10 | s10 );
1417   1              
1418   1              // 1-minute
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 24  

1419   1              mi1 = time.minutes % 10;
1420   1              rtcRegWrite( 0x20 | mi1 );
1421   1              
1422   1              // 10-minute
1423   1              mi10 = time.minutes / 10;
1424   1              rtcRegWrite( 0x30 | mi10 );
1425   1              
1426   1              // 1-hour
1427   1              h1 = time.hours % 10;
1428   1              rtcRegWrite( 0x40 | h1 );
1429   1              
1430   1              // 10-hour
1431   1              h10 = time.hours / 10;
1432   1              rtcRegWrite( 0x50 | h10 );
1433   1              
1434   1              // 1-day
1435   1              d1 = time.days % 10;
1436   1              rtcRegWrite( 0x60 | d1 );
1437   1              
1438   1              // 10-day
1439   1              d10 = time.days / 10;
1440   1              rtcRegWrite( 0x70 | d10 );
1441   1              
1442   1              // 1-month
1443   1              mo1 = time.months % 10;
1444   1              rtcRegWrite( 0x80 | mo1 );
1445   1              
1446   1              // 10-month
1447   1              mo10 = time.months / 10;
1448   1              rtcRegWrite( 0x90 | mo10 );
1449   1              
1450   1              // 1-year
1451   1              y1 = time.years % 10;
1452   1              rtcRegWrite( 0xA0 | y1 );
1453   1              
1454   1              // 10-year
1455   1              y10 = time.years / 10;
1456   1              rtcRegWrite( 0xB0 | y10 );
1457   1              
1458   1              // Day of the week
1459   1              rtcRegWrite( 0xC0 | time.week );
1460   1              
1461   1      } // end rtcSetTime()
1462          
1463          // -------------------------------------------------------------- //
1464          
1465          struct time_data rtcGetTime( void ) {
1466   1              
1467   1              struct time_data time;
1468   1              byte s1, s10, mi1, mi10, h1, h10, d1, d10, mo1, mo10, y1, y10, w;
1469   1              
1470   1              s1 = rtcRegRead( 0x00 );
1471   1              s10 = rtcRegRead( 0x01 );
1472   1              time.seconds = s1 + ( s10 * 10 );
1473   1      
1474   1              mi1 = rtcRegRead( 0x02 );
1475   1              mi10 = rtcRegRead( 0x03 );
1476   1              time.minutes = mi1 + ( mi10 * 10 );
1477   1      
1478   1              h1 = rtcRegRead( 0x04 );
1479   1              h10 = rtcRegRead( 0x05 );
1480   1              time.hours = h1 + ( h10 * 10 );
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 25  

1481   1      
1482   1              d1 = rtcRegRead( 0x06 );
1483   1              d10 = rtcRegRead( 0x07 );
1484   1              time.days = d1 + ( d10 * 10 );
1485   1      
1486   1              mo1 = rtcRegRead( 0x08 );
1487   1              mo10 = rtcRegRead( 0x09 );
1488   1              time.months = mo1 + ( mo10 * 10 );
1489   1      
1490   1              y1 = rtcRegRead( 0x0A );
1491   1              y10 = rtcRegRead( 0x0B );
1492   1              time.years = y1 + ( y10 * 10 );
1493   1      
1494   1              w = rtcRegRead( 0x0C );
1495   1              time.week = w;
1496   1      
1497   1              return time;
1498   1              
1499   1      } // end rtcSetTime()
1500          
1501          // -------------------------------------------------------------- //
1502          
1503          void rtcPrintTime( struct time_data *time ) {
1504   1      
1505   1              char timeStr[] = "0 00/00/00 00:00:00`";
1506   1      
1507   1              sprintf( timeStr, "%d %02d/%02d/%02d %02d:%02d:%02d`", 
1508   1                              (int)time->week, 
1509   1                              (int)time->months, (int)time->days, (int)time->years, 
1510   1                              (int)time->hours, (int)time->minutes, (int)time->seconds );
1511   1              lcdString( &timeStr );
1512   1      
1513   1      } // end rtcPrintTime()
1514          
1515          // -------------------------------------------------------------- //
1516          
1517          void missionControl1( int dec ) {
1518   1              
1519   1              switch ( dec ) {
1520   2                      
1521   2                      // The MSB is changed first to avoid false triggers of the LCD enable
1522   2                      // line as the enable line never goes high when the MSB is low.
1523   2                      case ctrl_off: {
1524   3                              dec2 = 0;
1525   3                              dec1 = 0;
1526   3                              dec0 = 0;
1527   3                              break;
1528   3                      }
1529   2                      case ctrl_ss_latch: {
1530   3                              dec2 = 0;
1531   3                              dec1 = 0;
1532   3                              dec0 = 1;
1533   3                              break;
1534   3                      }
1535   2                      case ctrl_kp_oe: {
1536   3                              dec2 = 0;
1537   3                              dec1 = 1;
1538   3                              dec0 = 0;
1539   3                              break;
1540   3                      }
1541   2                      case ctrl_kp_oelatch: {
1542   3                              dec2 = 0;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 26  

1543   3                              dec1 = 1;
1544   3                              dec0 = 1;
1545   3                              break;
1546   3                      }
1547   2                      case ctrl_lcd_cmd_start: {
1548   3                              dec2 = 1;
1549   3                              dec1 = 0;
1550   3                              dec0 = 0;
1551   3                              break;
1552   3                      }
1553   2                      case ctrl_lcd_cmd_finish: {
1554   3                              dec2 = 1;
1555   3                              dec1 = 0;
1556   3                              dec0 = 1;
1557   3                              break;
1558   3                      }
1559   2                      case ctrl_lcd_data_start: {
1560   3                              dec2 = 1;
1561   3                              dec1 = 1;
1562   3                              dec0 = 0;
1563   3                              break;
1564   3                      }
1565   2                      case ctrl_lcd_data_finish: {
1566   3                              dec2 = 1;
1567   3                              dec1 = 1;
1568   3                              dec0 = 1;
1569   3                              break;
1570   3                      }               
1571   2              } // end switch
1572   1              
1573   1      } // end missionControl1()
1574          
1575          // -------------------------------------------------------------- //
1576          
1577          void missionControl2( int dec ) {
1578   1              
1579   1              switch ( dec ) {
1580   2                      case ctrl_off: {
1581   3                              dec4 = 0;
1582   3                              dec3 = 0;
1583   3                              dec5 = 0;
1584   3                              break;
1585   3                      }
1586   2                      case ctrl_adc_start: {
1587   3                              dec4 = 0;
1588   3                              dec3 = 1;
1589   3                              dec5 = 0;
1590   3                              break;
1591   3                      }
1592   2                      case ctrl_rtc_rd: {
1593   3                              dec4 = 1;
1594   3                              dec3 = 0;
1595   3                              dec5 = 0;
1596   3                              break;
1597   3                      }
1598   2                      case ctrl_adc_finish: {
1599   3                              dec4 = 1;
1600   3                              dec3 = 1;
1601   3                              dec5 = 0;
1602   3                              break;
1603   3                      }
1604   2                      case ctrl_rtc_cs1: {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/15/2017 10:32:43 PAGE 27  

1605   3                              dec4 = 0;
1606   3                              dec3 = 0;
1607   3                              dec5 = 1;
1608   3                              break;
1609   3                      }
1610   2                      // not used
1611   2      //              case ctrl_rtc_cs0: {
1612   2      //                      dec5 = 1;
1613   2      //                      dec4 = 0;
1614   2      //                      dec3 = 1;
1615   2      //                      break;
1616   2      //              }
1617   2                      case ctrl_rtc_cs0: {
1618   3                              dec4 = 1;
1619   3                              dec3 = 0;
1620   3                              dec5 = 1;
1621   3                              break;
1622   3                      }
1623   2                      case ctrl_rtc_wr: {
1624   3                              dec4 = 1;
1625   3                              dec3 = 1;
1626   3                              dec5 = 1;
1627   3                              break;
1628   3                      }               
1629   2              } // end switch
1630   1              
1631   1      } // end missionControl2()
1632          
1633          // -------------------------------------------------------------- //
1634          
1635          void msDelay( unsigned msecs ) {
1636   1              
1637   1              unsigned i;
1638   1              unsigned char j;
1639   1              
1640   1              msecs = msecs * 3.23;
1641   1              
1642   1              for(i=0;i<msecs;i++){
1643   2                      for(j=0;j<100;j++);
1644   2              }
1645   1              
1646   1      } // end msDelay()
1647          
1648          // -------------------------------------------------------------- //
1649          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5032    ----
   CONSTANT SIZE    =    527    ----
   XDATA SIZE       =   ----     741
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
