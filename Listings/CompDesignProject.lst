C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 12:49:18 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE COMPDESIGNPROJECT
OBJECT MODULE PLACED IN .\Objects\CompDesignProject.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE CompDesignProject.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\CompDesignProject.lst) TABS(2) OBJECT(.\Objects\CompDesignProject.obj)

line level    source

   1          /* Auth: Megan Bird
   2           * File: CompDesignProject.c
   3           * Course: CEEN-4330 – Microprocessor System Design – University of Nebraska-Lincoln
   4           * Lab: Project
   5           * Date: 3/14/2017
   6           * Desc: 8051 program with ROM, RAM, and I/O
   7           */
   8           
   9          #include <REGX55.H>
  10          #include <stdio.h>
  11          
  12          // P1
  13          sbit P1_0 = P1^0;
  14          sbit P1_1 = P1^1;
  15          
  16          // P3
  17          sbit P3_0 = P3^0;
  18          sbit P3_1 = P3^1;
  19          sbit P3_2 = P3^2;
  20          sbit P3_3 = P3^3;
  21          sbit P3_4 = P3^4;
  22          sbit P3_5 = P3^5;
  23          sbit P3_6 = P3^6;
  24          sbit P3_7 = P3^7;
  25          
  26          // Keypad
  27          sbit kCol1  = P1^7;
  28          sbit kCol2  = P1^6;
  29          sbit kCol3  = P1^5;
  30          sbit kCol4  = P1^4;
  31          sbit kRow1  = P1^3;
  32          sbit kRow2  = P1^2;
  33          sbit kRow3  = P1^1;
  34          sbit kRow4  = P1^0;
  35          sbit cs_keypad = P3^1;
  36          sbit oe_keypad = P3^2;
  37          
  38          // Seven-Segment Display
  39          sfr sevenSegPort = 0x90;
  40          sbit cs_sevenSeg = P3^0;
  41          
  42          // ======================= prototypes =========================== //
  43          
  44          typedef unsigned char byte;
  45          
  46          struct keypad_data {
  47            unsigned char k1;
  48            unsigned char k2;
  49            unsigned char k3;
  50            unsigned char k4;
  51            unsigned char k5;
  52            unsigned char k6;
  53            unsigned char k7;
  54            unsigned char k8;
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 12:49:18 PAGE 2   

  55            unsigned char k9;
  56            unsigned char k0;
  57            unsigned char kA;
  58            unsigned char kB;
  59            unsigned char kC;
  60            unsigned char kD;
  61            unsigned char kstar;
  62            unsigned char kpound;
  63          };
  64          
  65          void latchSevenSeg( void );
  66          void latchKeypad( void );
  67          void outputSevenSeg( char character );
  68          struct keypad_data getKeysPressed( void );
  69          void displayKeyPressed( struct keypad_data keypad );
  70          void delay( unsigned msecs );
  71          
  72          // ======================== main ================================ //
  73          
  74          void main(void) {
  75   1        
  76   1        struct keypad_data keypad;
  77   1        
  78   1        while (1) {
  79   2          
  80   2          keypad = getKeysPressed();
  81   2      //    outputSevenSeg('5');
  82   2          displayKeyPressed( keypad );
  83   2      //    outputSevenSeg('5');
  84   2      //    delay(2000);
  85   2      //    outputSevenSeg('1');
  86   2      //    delay(2000);
  87   2        }
  88   1        
  89   1        while(1); // Stay off the streets
  90   1        
  91   1      } // end main()
  92          
  93          // ======================= functions ============================ //
  94          
  95          void latchSevenSeg( void ) {
  96   1        
  97   1        cs_sevenSeg = 1;
  98   1        cs_sevenSeg = 0;
  99   1        
 100   1      } // end latchSevenSeg()
 101          
 102          // -------------------------------------------------------------- //
 103          
 104          void latchKeypad( void ) {
 105   1        
 106   1        cs_keypad = 1;
 107   1        cs_keypad = 0;
 108   1        
 109   1      } // end latchKeypad()
 110          
 111          // -------------------------------------------------------------- //
 112          
 113          void outputSevenSeg( char character ) {
 114   1        
 115   1        switch( character ) {
 116   2          case '0': sevenSegPort = ~0x3F; break;
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 12:49:18 PAGE 3   

 117   2          case '1': sevenSegPort = ~0x06; break;
 118   2          case '2': sevenSegPort = ~0x5B; break;
 119   2          case '3': sevenSegPort = ~0x4F; break;
 120   2          case '4': sevenSegPort = ~0x66; break;
 121   2          case '5': sevenSegPort = ~0x6D; break;
 122   2          case '6': sevenSegPort = ~0x7D; break;
 123   2          case '7': sevenSegPort = ~0x07; break;
 124   2          case '8': sevenSegPort = ~0x7F; break;
 125   2          case '9': sevenSegPort = ~0x67; break;
 126   2          case 'A': sevenSegPort = ~0x77; break;
 127   2          case 'b': sevenSegPort = ~0x7C; break;
 128   2          case 'C': sevenSegPort = ~0x39; break;
 129   2          case 'd': sevenSegPort = ~0x5E; break;
 130   2          case 'E': sevenSegPort = ~0x79; break;
 131   2          case 'F': sevenSegPort = ~0x71; break;
 132   2          case '-': sevenSegPort = 0xBF;  break;
 133   2          case '.': sevenSegPort = 0x7F;  break;
 134   2          case 'o': sevenSegPort = 0xFF;  break;  // off
 135   2          default:  sevenSegPort = 0xAA;          // invalid
 136   2        }
 137   1        
 138   1        latchSevenSeg();
 139   1        
 140   1      } // end outputSevenSeg()
 141          
 142          // -------------------------------------------------------------- //
 143          
 144          struct keypad_data getKeysPressed( void ) {
 145   1        
 146   1        struct keypad_data keypad;
 147   1        
 148   1        // enable keypad latch output
 149   1        oe_keypad = 0;
 150   1        
 151   1        // Set keypad columns as outputs & rows as inputs
 152   1        kCol1 = 0;
 153   1        kCol2 = 0;
 154   1        kCol3 = 0;
 155   1        kCol4 = 0;
 156   1        kRow1 = 1;
 157   1        kRow2 = 1;
 158   1        kRow3 = 1;
 159   1        kRow4 = 1;
 160   1        
 161   1        // scan by columns
 162   1      
 163   1        // column 1
 164   1        kCol1 = 0;
 165   1        kCol2 = 1;
 166   1        kCol3 = 1;
 167   1        kCol4 = 1;
 168   1        latchKeypad();
 169   1        
 170   1        if (kRow1 == 0) {
 171   2          keypad.k1 = 1;
 172   2        }
 173   1        else {
 174   2          keypad.k1 = 0;
 175   2        }
 176   1        if (kRow2 == 0) {
 177   2          keypad.k4 = 1;
 178   2        }
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 12:49:18 PAGE 4   

 179   1        else {
 180   2          keypad.k4 = 0;
 181   2        }
 182   1        if (kRow3 == 0) {
 183   2          keypad.k7 = 1;
 184   2        }
 185   1        else {
 186   2          keypad.k7 = 0;
 187   2        }
 188   1        if (kRow4 == 0) {
 189   2          keypad.kstar = 1;
 190   2        }
 191   1        else {
 192   2          keypad.kstar = 0;
 193   2        }
 194   1        kCol1 = 1;
 195   1        
 196   1        // column 2
 197   1        kCol2 = 0;
 198   1        latchKeypad();
 199   1        
 200   1        if (kRow1 == 0) {
 201   2          keypad.k2 = 1;
 202   2        }
 203   1        else {
 204   2          keypad.k2 = 0;
 205   2        }
 206   1        if (kRow2 == 0) {
 207   2          keypad.k5 = 1;
 208   2        }
 209   1        else {
 210   2          keypad.k5 = 0;
 211   2        }
 212   1        if (kRow3 == 0) {
 213   2          keypad.k8 = 1;
 214   2        }
 215   1        else {
 216   2          keypad.k8 = 0;
 217   2        }
 218   1        if (kRow4 == 0) {
 219   2          keypad.k0 = 1;
 220   2        }
 221   1        else {
 222   2          keypad.k0 = 0;
 223   2        }
 224   1        kCol2 = 1;
 225   1        
 226   1        // column 3
 227   1        kCol3 = 0;
 228   1        latchKeypad();
 229   1        
 230   1        if (kRow1 == 0) {
 231   2          keypad.k3 = 1;
 232   2        }
 233   1        else {
 234   2          keypad.k3 = 0;
 235   2        }
 236   1        if (kRow2 == 0) {
 237   2          keypad.k6 = 1;
 238   2        }
 239   1        else {
 240   2          keypad.k6 = 0;
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 12:49:18 PAGE 5   

 241   2        }
 242   1        if (kRow3 == 0) {
 243   2          keypad.k9 = 1;
 244   2        }
 245   1        else {
 246   2          keypad.k9 = 0;
 247   2        }
 248   1        if (kRow4 == 0) {
 249   2          keypad.kpound = 1;
 250   2        }
 251   1        else {
 252   2          keypad.kpound = 0;
 253   2        }
 254   1        kCol3 = 1;
 255   1        
 256   1        // column 4
 257   1        kCol4 = 0;
 258   1        latchKeypad();
 259   1        
 260   1        if (kRow1 == 0) {
 261   2          keypad.kA = 1;
 262   2        }
 263   1        else {
 264   2          keypad.kA = 0;
 265   2        }
 266   1        if (kRow2 == 0) {
 267   2          keypad.kB = 1;
 268   2        }
 269   1        else {
 270   2          keypad.kB = 0;
 271   2        }
 272   1        if (kRow3 == 0) {
 273   2          keypad.kC = 1;
 274   2        }
 275   1        else {
 276   2          keypad.kC = 0;
 277   2        }
 278   1        if (kRow4 == 0) {
 279   2          keypad.kD = 1;
 280   2        }
 281   1        else {
 282   2          keypad.kD = 0;
 283   2        }
 284   1        kCol4 = 1;
 285   1        latchKeypad();
 286   1        
 287   1        // disable keypad latch output
 288   1        oe_keypad = 1;
 289   1        
 290   1        return keypad; 
 291   1        
 292   1      } // end getKeysPressed()
 293          
 294          // -------------------------------------------------------------- //
 295          
 296          void displayKeyPressed( struct keypad_data keypad ) {
 297   1        
 298   1        if ( keypad.k1 == 1 ) {
 299   2          outputSevenSeg('1');
 300   2        }
 301   1        else if ( keypad.k2 == 1 ) {
 302   2          outputSevenSeg('2');
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 12:49:18 PAGE 6   

 303   2        }
 304   1        else if ( keypad.k3 == 1 ) {
 305   2          outputSevenSeg('3');
 306   2        }
 307   1        else if ( keypad.k4 == 1 ) {
 308   2          outputSevenSeg('4');
 309   2        }
 310   1        else if ( keypad.k5 == 1 ) {
 311   2          outputSevenSeg('5');
 312   2        }
 313   1        else if ( keypad.k6 == 1 ) {
 314   2          outputSevenSeg('6');
 315   2        }
 316   1        else if ( keypad.k7 == 1 ) {
 317   2          outputSevenSeg('7');
 318   2        }
 319   1        else if ( keypad.k8 == 1 ) {
 320   2          outputSevenSeg('8');
 321   2        }
 322   1        else if ( keypad.k9 == 1 ) {
 323   2          outputSevenSeg('9');
 324   2        }
 325   1        else if ( keypad.kA == 1 ) {
 326   2          outputSevenSeg('A');
 327   2        }
 328   1        else if ( keypad.k0 == 1 ) {
 329   2          outputSevenSeg('0');
 330   2        }
 331   1        else if ( keypad.kB == 1 ) {
 332   2          outputSevenSeg('b');
 333   2        }
 334   1        else if ( keypad.kC == 1 ) {
 335   2          outputSevenSeg('C');
 336   2        }
 337   1        else if ( keypad.kD == 1 ) {
 338   2          outputSevenSeg('d');
 339   2        }
 340   1        else if ( keypad.kstar == 1 ) {
 341   2          outputSevenSeg('.');
 342   2        }
 343   1        else if ( keypad.kpound == 1 ) {
 344   2          outputSevenSeg('-');
 345   2        }
 346   1        else {
 347   2          outputSevenSeg('o');
 348   2        }
 349   1        
 350   1      } // end displayKeyPressed()
 351            
 352          // -------------------------------------------------------------- //
 353          
 354          void delay( unsigned msecs ) {
 355   1        
 356   1        unsigned i;
 357   1        unsigned char j;
 358   1        
 359   1        for(i=0;i<msecs;i++){
 360   2          for(j=0;j<100;j++);
 361   2        }
 362   1        
 363   1      } // end msDelay()
 364          
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/23/2017 12:49:18 PAGE 7   

 365          // -------------------------------------------------------------- //
 366          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    632    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      48
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
