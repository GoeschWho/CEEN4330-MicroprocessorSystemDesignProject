C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/24/2017 09:36:27 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE COMPDESIGNPROJECT
OBJECT MODULE PLACED IN .\Objects\CompDesignProject.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE CompDesignProject.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\CompDesignProject.lst) TABS(2) OBJECT(.\Objects\CompDesignProject.obj)

line level    source

   1          /* Auth: Megan Bird
   2           * File: CompDesignProject.c
   3           * Course: CEEN-4330 – Microprocessor System Design – University of Nebraska-Lincoln
   4           * Lab: Project
   5           * Date: 3/14/2017
   6           * Desc: 8051 program with ROM, RAM, and I/O
   7           */
   8           
   9          #include <REGX55.H>
  10          #include <stdio.h>
  11          
  12          // P1
  13          sbit P1_0 = P1^0;
  14          sbit P1_1 = P1^1;
  15          
  16          // P3
  17          sbit P3_0 = P3^0;
  18          sbit P3_1 = P3^1;
  19          sbit P3_2 = P3^2;
  20          sbit P3_3 = P3^3;
  21          sbit P3_4 = P3^4;
  22          sbit P3_5 = P3^5;
  23          sbit P3_6 = P3^6;
  24          sbit P3_7 = P3^7;
  25          
  26          // Keypad
  27          sbit kCol1  = P1^7;
  28          sbit kCol2  = P1^6;
  29          sbit kCol3  = P1^5;
  30          sbit kCol4  = P1^4;
  31          sbit kRow1  = P1^3;
  32          sbit kRow2  = P1^2;
  33          sbit kRow3  = P1^1;
  34          sbit kRow4  = P1^0;
  35          sbit cs_keypad = P3^1;    // latch
  36          sbit oe_keypad = P3^2;
  37          
  38          // Seven-Segment Display
  39          sfr sevenSegPort = 0x90;
  40          sbit cs_sevenSeg = P3^0;  // latch
  41          
  42          // LCD
  43          sbit cs_lcd = P3^3;       // latch
  44          sbit rs_lcd = P3^4;       // reg select
  45          sbit e_lcd  = P3^5;       // enable
  46          // rw tied to ground to always enable read
  47          sfr lcdPort = 0x90;
  48          
  49          // Mission Control
  50          enum {ctrl_off,
  51                ctrl_ss_latch,
  52                ctrl_kp_oe,
  53                ctrl_kp_oelatch,
  54                ctrl_lcd_cmd_start,
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/24/2017 09:36:27 PAGE 2   

  55                ctrl_lcd_cmd_finish,
  56                ctrl_lcd_data_start,
  57                ctrl_lcd_data_finish };
  58                
  59          
  60          // ======================= prototypes =========================== //
  61          
  62          typedef unsigned char byte;
  63          
  64          struct keypad_data {
  65            unsigned char k1;
  66            unsigned char k2;
  67            unsigned char k3;
  68            unsigned char k4;
  69            unsigned char k5;
  70            unsigned char k6;
  71            unsigned char k7;
  72            unsigned char k8;
  73            unsigned char k9;
  74            unsigned char k0;
  75            unsigned char kA;
  76            unsigned char kB;
  77            unsigned char kC;
  78            unsigned char kD;
  79            unsigned char kstar;
  80            unsigned char kpound;
  81          };
  82          
  83          void latchSevenSeg( void );
  84          void latchKeypad( void );
  85          void outputSevenSeg( char character );
  86          struct keypad_data getKeysPressed( void );
  87          void displayKeyPressed( struct keypad_data keypad );
  88          void lcdCmd( byte cmd );
  89          void lcdData( byte dat );
  90          void lcdInit( void );
  91          void lcdClear( void );
  92          void lcdChar( byte character );
  93          void lcdString( volatile char *string );
  94          void lcdLine( int line );
  95          void missionControl( int dec );
  96          void msDelay( unsigned msecs );
  97          
  98          // ======================== main ================================ //
  99          
 100          void main(void) {
 101   1        
 102   1        struct keypad_data keypad;
 103   1        
 104   1        char string1[] = "Hello world`";
 105   1        char string2[] = "M&M's`";
 106   1        
 107   1        cs_keypad = 0;
 108   1        cs_sevenSeg = 0;
 109   1        cs_lcd = 0;
 110   1        
 111   1        lcdInit();
 112   1        
 113   1        lcdLine(1);
 114   1        lcdString( &string1 );
 115   1        lcdLine(2);
 116   1        lcdString( &string2 );
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/24/2017 09:36:27 PAGE 3   

 117   1        
 118   1        while (1) {
 119   2          keypad = getKeysPressed();
 120   2          displayKeyPressed( keypad );
 121   2        }
 122   1      
 123   1        while(1); // Stay off the streets
 124   1        
 125   1      } // end main()
 126          
 127          // ======================= functions ============================ //
 128          
 129          void latchSevenSeg( void ) {
 130   1        
 131   1      //  cs_sevenSeg = 1;
 132   1      //  cs_sevenSeg = 0;
 133   1        
 134   1        missionControl( ctrl_ss_latch );
 135   1        missionControl( ctrl_off );
 136   1        
 137   1      } // end latchSevenSeg()
 138          
 139          // -------------------------------------------------------------- //
 140          
 141          void latchKeypad( void ) {
 142   1        
 143   1      //  cs_keypad = 1;
 144   1      //  cs_keypad = 0;
 145   1        
 146   1        missionControl( ctrl_kp_oelatch );
 147   1        missionControl( ctrl_kp_oe );
 148   1        
 149   1      } // end latchKeypad()
 150          
 151          // -------------------------------------------------------------- //
 152          
 153          void latchLCD( void ) {
 154   1        
 155   1        cs_lcd = 1;
 156   1        cs_lcd = 0;
 157   1        
 158   1      } // end latchLCD()
 159          
 160          // -------------------------------------------------------------- //
 161          
 162          void outputSevenSeg( char character ) {
 163   1        
 164   1        switch( character ) {
 165   2          case '0': sevenSegPort = ~0x3F; break;
 166   2          case '1': sevenSegPort = ~0x06; break;
 167   2          case '2': sevenSegPort = ~0x5B; break;
 168   2          case '3': sevenSegPort = ~0x4F; break;
 169   2          case '4': sevenSegPort = ~0x66; break;
 170   2          case '5': sevenSegPort = ~0x6D; break;
 171   2          case '6': sevenSegPort = ~0x7D; break;
 172   2          case '7': sevenSegPort = ~0x07; break;
 173   2          case '8': sevenSegPort = ~0x7F; break;
 174   2          case '9': sevenSegPort = ~0x67; break;
 175   2          case 'A': sevenSegPort = ~0x77; break;
 176   2          case 'b': sevenSegPort = ~0x7C; break;
 177   2          case 'C': sevenSegPort = ~0x39; break;
 178   2          case 'd': sevenSegPort = ~0x5E; break;
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/24/2017 09:36:27 PAGE 4   

 179   2          case 'E': sevenSegPort = ~0x79; break;
 180   2          case 'F': sevenSegPort = ~0x71; break;
 181   2          case '-': sevenSegPort = 0xBF;  break;
 182   2          case '.': sevenSegPort = 0x7F;  break;
 183   2          case 'o': sevenSegPort = 0xFF;  break;  // off
 184   2          default:  sevenSegPort = 0xAA;          // invalid
 185   2        }
 186   1        
 187   1        latchSevenSeg();
 188   1        
 189   1      } // end outputSevenSeg()
 190          
 191          // -------------------------------------------------------------- //
 192          
 193          struct keypad_data getKeysPressed( void ) {
 194   1        
 195   1        struct keypad_data keypad;
 196   1        
 197   1        // enable keypad latch output
 198   1        //oe_keypad = 0;
 199   1        missionControl( ctrl_kp_oe );
 200   1        
 201   1        // Set keypad columns as outputs & rows as inputs
 202   1        kCol1 = 0;
 203   1        kCol2 = 0;
 204   1        kCol3 = 0;
 205   1        kCol4 = 0;
 206   1        kRow1 = 1;
 207   1        kRow2 = 1;
 208   1        kRow3 = 1;
 209   1        kRow4 = 1;
 210   1        
 211   1        // scan by columns
 212   1      
 213   1        // column 1
 214   1        kCol1 = 0;
 215   1        kCol2 = 1;
 216   1        kCol3 = 1;
 217   1        kCol4 = 1;
 218   1        latchKeypad();
 219   1        
 220   1        if (kRow1 == 0) {
 221   2          keypad.k1 = 1;
 222   2        }
 223   1        else {
 224   2          keypad.k1 = 0;
 225   2        }
 226   1        if (kRow2 == 0) {
 227   2          keypad.k4 = 1;
 228   2        }
 229   1        else {
 230   2          keypad.k4 = 0;
 231   2        }
 232   1        if (kRow3 == 0) {
 233   2          keypad.k7 = 1;
 234   2        }
 235   1        else {
 236   2          keypad.k7 = 0;
 237   2        }
 238   1        if (kRow4 == 0) {
 239   2          keypad.kstar = 1;
 240   2        }
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/24/2017 09:36:27 PAGE 5   

 241   1        else {
 242   2          keypad.kstar = 0;
 243   2        }
 244   1        kCol1 = 1;
 245   1        
 246   1        // column 2
 247   1        kCol2 = 0;
 248   1        latchKeypad();
 249   1        
 250   1        if (kRow1 == 0) {
 251   2          keypad.k2 = 1;
 252   2        }
 253   1        else {
 254   2          keypad.k2 = 0;
 255   2        }
 256   1        if (kRow2 == 0) {
 257   2          keypad.k5 = 1;
 258   2        }
 259   1        else {
 260   2          keypad.k5 = 0;
 261   2        }
 262   1        if (kRow3 == 0) {
 263   2          keypad.k8 = 1;
 264   2        }
 265   1        else {
 266   2          keypad.k8 = 0;
 267   2        }
 268   1        if (kRow4 == 0) {
 269   2          keypad.k0 = 1;
 270   2        }
 271   1        else {
 272   2          keypad.k0 = 0;
 273   2        }
 274   1        kCol2 = 1;
 275   1        
 276   1        // column 3
 277   1        kCol3 = 0;
 278   1        latchKeypad();
 279   1        
 280   1        if (kRow1 == 0) {
 281   2          keypad.k3 = 1;
 282   2        }
 283   1        else {
 284   2          keypad.k3 = 0;
 285   2        }
 286   1        if (kRow2 == 0) {
 287   2          keypad.k6 = 1;
 288   2        }
 289   1        else {
 290   2          keypad.k6 = 0;
 291   2        }
 292   1        if (kRow3 == 0) {
 293   2          keypad.k9 = 1;
 294   2        }
 295   1        else {
 296   2          keypad.k9 = 0;
 297   2        }
 298   1        if (kRow4 == 0) {
 299   2          keypad.kpound = 1;
 300   2        }
 301   1        else {
 302   2          keypad.kpound = 0;
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/24/2017 09:36:27 PAGE 6   

 303   2        }
 304   1        kCol3 = 1;
 305   1        
 306   1        // column 4
 307   1        kCol4 = 0;
 308   1        latchKeypad();
 309   1        
 310   1        if (kRow1 == 0) {
 311   2          keypad.kA = 1;
 312   2        }
 313   1        else {
 314   2          keypad.kA = 0;
 315   2        }
 316   1        if (kRow2 == 0) {
 317   2          keypad.kB = 1;
 318   2        }
 319   1        else {
 320   2          keypad.kB = 0;
 321   2        }
 322   1        if (kRow3 == 0) {
 323   2          keypad.kC = 1;
 324   2        }
 325   1        else {
 326   2          keypad.kC = 0;
 327   2        }
 328   1        if (kRow4 == 0) {
 329   2          keypad.kD = 1;
 330   2        }
 331   1        else {
 332   2          keypad.kD = 0;
 333   2        }
 334   1        kCol4 = 1;
 335   1        latchKeypad();
 336   1        
 337   1        // disable keypad latch output
 338   1        //oe_keypad = 1;
 339   1        missionControl( ctrl_off );
 340   1        
 341   1        return keypad; 
 342   1        
 343   1      } // end getKeysPressed()
 344          
 345          // -------------------------------------------------------------- //
 346          
 347          void displayKeyPressed( struct keypad_data keypad ) {
 348   1        
 349   1        if ( keypad.k1 == 1 ) {
 350   2          outputSevenSeg('1');
 351   2        }
 352   1        else if ( keypad.k2 == 1 ) {
 353   2          outputSevenSeg('2');
 354   2        }
 355   1        else if ( keypad.k3 == 1 ) {
 356   2          outputSevenSeg('3');
 357   2        }
 358   1        else if ( keypad.k4 == 1 ) {
 359   2          outputSevenSeg('4');
 360   2        }
 361   1        else if ( keypad.k5 == 1 ) {
 362   2          outputSevenSeg('5');
 363   2        }
 364   1        else if ( keypad.k6 == 1 ) {
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/24/2017 09:36:27 PAGE 7   

 365   2          outputSevenSeg('6');
 366   2        }
 367   1        else if ( keypad.k7 == 1 ) {
 368   2          outputSevenSeg('7');
 369   2        }
 370   1        else if ( keypad.k8 == 1 ) {
 371   2          outputSevenSeg('8');
 372   2        }
 373   1        else if ( keypad.k9 == 1 ) {
 374   2          outputSevenSeg('9');
 375   2        }
 376   1        else if ( keypad.kA == 1 ) {
 377   2          outputSevenSeg('A');
 378   2        }
 379   1        else if ( keypad.k0 == 1 ) {
 380   2          outputSevenSeg('0');
 381   2        }
 382   1        else if ( keypad.kB == 1 ) {
 383   2          outputSevenSeg('b');
 384   2        }
 385   1        else if ( keypad.kC == 1 ) {
 386   2          outputSevenSeg('C');
 387   2        }
 388   1        else if ( keypad.kD == 1 ) {
 389   2          outputSevenSeg('d');
 390   2        }
 391   1        else if ( keypad.kstar == 1 ) {
 392   2          outputSevenSeg('.');
 393   2        }
 394   1        else if ( keypad.kpound == 1 ) {
 395   2          outputSevenSeg('-');
 396   2        }
 397   1        else {
 398   2          outputSevenSeg('o');
 399   2        }
 400   1        
 401   1      } // end displayKeyPressed()
 402            
 403          // -------------------------------------------------------------- //
 404          
 405          void lcdCmd( byte cmd ) {
 406   1        
 407   1        //rs_lcd = 0;     // reg select low for command
 408   1        // --- RW tied low for write --- //
 409   1        //e_lcd = 1;      // E high for pulse
 410   1        
 411   1        missionControl( ctrl_lcd_cmd_start );
 412   1        
 413   1        lcdPort = cmd;
 414   1        //latchLCD();
 415   1        
 416   1        msDelay(1);     // Need Tpw > 140 ns
 417   1        //e_lcd = 0;      // E low to end pulse
 418   1        
 419   1        missionControl( ctrl_lcd_cmd_finish );
 420   1        
 421   1      } // end lcdCmd()
 422          
 423          // -------------------------------------------------------------- //
 424          
 425          void lcdData( byte dat ) {
 426   1        
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/24/2017 09:36:27 PAGE 8   

 427   1        //rs_lcd = 1;     // reg select high for data
 428   1        // --- RW tied low for write --- //
 429   1        //e_lcd = 1;      // E high for pulse
 430   1        
 431   1        missionControl( ctrl_lcd_data_start );
 432   1        
 433   1        lcdPort = dat;
 434   1        //latchLCD();
 435   1        
 436   1        msDelay(1);     // Need Tpw > 140 ns
 437   1        //e_lcd = 0;      // E low to end pulse
 438   1        
 439   1        missionControl( ctrl_lcd_data_finish );
 440   1        
 441   1      } // end lcdData()
 442          
 443          // -------------------------------------------------------------- //
 444          
 445          void lcdInit( void ) {  
 446   1        
 447   1        msDelay(50);
 448   1        lcdCmd(0x38);     // Function set
 449   1        msDelay(5);
 450   1        lcdCmd(0x38);     // Function set
 451   1        msDelay(1);
 452   1        lcdCmd(0x0F);     // Display ON/OFF control
 453   1        msDelay(1);
 454   1        lcdCmd(0x01);     // Clear display
 455   1        msDelay(2);
 456   1        
 457   1      } // end lcdInit()
 458          
 459          // -------------------------------------------------------------- //
 460          
 461          void lcdClear( void ) {
 462   1        
 463   1        lcdCmd(0x01);     // Clear display
 464   1        msDelay(2);
 465   1        
 466   1      } // end lcdClear()
 467          
 468          // -------------------------------------------------------------- //
 469          
 470          void lcdChar( byte character ) {
 471   1        
 472   1        lcdData(character);   // send character
 473   1        
 474   1      } // end lcdChar()
 475          
 476          // -------------------------------------------------------------- //
 477          
 478          void lcdString( volatile char *string ) {
 479   1        
 480   1        int i = 0;
 481   1        while( string[i] != '`') {
 482   2          lcdChar( string[i] );
 483   2          i++;
 484   2        }
 485   1        
 486   1      } // end lcdString()
 487          
 488          // -------------------------------------------------------------- //
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/24/2017 09:36:27 PAGE 9   

 489          
 490          void lcdLine( int line ) {
 491   1        
 492   1        switch (line) {
 493   2          case 1: {
 494   3            lcdCmd(0x80);
 495   3            break;
 496   3          }
 497   2          case 2: {
 498   3            lcdCmd(0xC0);
 499   3            break;
 500   3          }
 501   2          case 3: {
 502   3            lcdCmd(0x94);
 503   3            break;
 504   3          }
 505   2          case 4: {
 506   3            lcdCmd(0xD4);
 507   3            break;
 508   3          }
 509   2          default:
 510   2            lcdCmd(0x80);
 511   2          
 512   2        } // end switch
 513   1        
 514   1      } // end lcdLine()
 515          
 516          // -------------------------------------------------------------- //
 517          
 518          void missionControl( int dec ) {
 519   1        
 520   1        switch ( dec ) {
 521   2          
 522   2          // The MSB is changed first to avoid false triggers of the LCD enable
 523   2          // line as the enable line never goes high when the MSB is low.
 524   2          case ctrl_off: {
 525   3            P3_2 = 0;
 526   3            P3_1 = 0;
 527   3            P3_0 = 0;
 528   3            break;
 529   3          }
 530   2          case ctrl_ss_latch: {
 531   3            P3_2 = 0;
 532   3            P3_1 = 0;
 533   3            P3_0 = 1;
 534   3            break;
 535   3          }
 536   2          case ctrl_kp_oe: {
 537   3            P3_2 = 0;
 538   3            P3_1 = 1;
 539   3            P3_0 = 0;
 540   3            break;
 541   3          }
 542   2          case ctrl_kp_oelatch: {
 543   3            P3_2 = 0;
 544   3            P3_1 = 1;
 545   3            P3_0 = 1;
 546   3            break;
 547   3          }
 548   2          case ctrl_lcd_cmd_start: {
 549   3            P3_2 = 1;
 550   3            P3_1 = 0;
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/24/2017 09:36:27 PAGE 10  

 551   3            P3_0 = 0;
 552   3            break;
 553   3          }
 554   2          case ctrl_lcd_cmd_finish: {
 555   3            P3_2 = 1;
 556   3            P3_1 = 0;
 557   3            P3_0 = 1;
 558   3            break;
 559   3          }
 560   2          case ctrl_lcd_data_start: {
 561   3            P3_2 = 1;
 562   3            P3_1 = 1;
 563   3            P3_0 = 0;
 564   3            break;
 565   3          }
 566   2          case ctrl_lcd_data_finish: {
 567   3            P3_2 = 1;
 568   3            P3_1 = 1;
 569   3            P3_0 = 1;
 570   3            break;
 571   3          }   
 572   2        } // end switch
 573   1        
 574   1      } // end missionControl()
 575          
 576          // -------------------------------------------------------------- //
 577          
 578          void msDelay( unsigned msecs ) {
 579   1        
 580   1        unsigned i;
 581   1        unsigned char j;
 582   1        
 583   1        msecs = msecs * 3.23;
 584   1        
 585   1        for(i=0;i<msecs;i++){
 586   2          for(j=0;j<100;j++);
 587   2        }
 588   1        
 589   1      } // end msDelay()
 590          
 591          // -------------------------------------------------------------- //
 592          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1048    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      75
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
