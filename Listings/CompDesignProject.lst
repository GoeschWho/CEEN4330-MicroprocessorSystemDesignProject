C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE COMPDESIGNPROJECT
OBJECT MODULE PLACED IN .\Objects\CompDesignProject.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE CompDesignProject.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\CompDe
                    -signProject.lst) OBJECT(.\Objects\CompDesignProject.obj)

line level    source

   1          /* Auth: Megan Bird
   2           * File: CompDesignProject.c
   3           * Course: CEEN-4330 – Microprocessor System Design – University of Nebraska-Lincoln
   4           * Lab: Project
   5           * Date: 3/14/2017
   6           * Desc: 8051 program with ROM, RAM, and I/O
   7           */
   8           
   9          #include <REGX55.H>
  10          #include <stdio.h>
  11          #include <absacc.h>
  12          
  13          // P1
  14          sbit P1_0 = P1^0;
  15          sbit P1_1 = P1^1;
  16          
  17          // P3
  18          sbit P3_0 = P3^0;
  19          sbit P3_1 = P3^1;
  20          sbit P3_2 = P3^2;
  21          sbit P3_3 = P3^3;
  22          sbit P3_4 = P3^4;
  23          sbit P3_5 = P3^5;
  24          sbit P3_6 = P3^6;
  25          sbit P3_7 = P3^7;
  26          
  27          // Keypad
  28          sbit kCol1  = P1^7;
  29          sbit kCol2  = P1^6;
  30          sbit kCol3  = P1^5;
  31          sbit kCol4  = P1^4;
  32          sbit kRow1  = P1^3;
  33          sbit kRow2  = P1^2;
  34          sbit kRow3  = P1^1;
  35          sbit kRow4  = P1^0;
  36          sbit cs_keypad = P3^1;          // latch
  37          sbit oe_keypad = P3^2;
  38          
  39          // Seven-Segment Display
  40          sfr sevenSegPort = 0x90;
  41          sbit cs_sevenSeg = P3^0;        // latch
  42          
  43          // LCD
  44          sbit cs_lcd = P3^3;                             // latch
  45          sbit rs_lcd = P3^4;                             // reg select
  46          sbit e_lcd  = P3^5;                             // enable
  47          // rw tied to ground to always enable read
  48          sfr lcdPort = 0x90;
  49          
  50          // ADC
  51          sbit oe_adc = P3^3;                             // latch output enable
  52          sbit wr_adc = P3^4;                             // WR line of ADC
  53          sfr adcPort = 0x90;
  54          
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 2   

  55          // RTC
  56          sbit rtc_data0 = P1^0;
  57          sbit rtc_data1 = P1^1;
  58          sbit rtc_data2 = P1^2;
  59          sbit rtc_data3 = P1^3;
  60          sbit rtc_add0 = P1^4;
  61          sbit rtc_add1 = P1^5;
  62          sbit rtc_add2 = P1^6;
  63          sbit rtc_add3 = P1^7;
  64          sfr rtcPort = 0x90;
  65          
  66          // Mission Control
  67          enum {ctrl_off,
  68                                  ctrl_ss_latch,
  69                                  ctrl_kp_oe,
  70                                  ctrl_kp_oelatch,
  71                                  ctrl_lcd_cmd_start,
  72                                  ctrl_lcd_cmd_finish,
  73                                  ctrl_lcd_data_start,
  74                                  ctrl_lcd_data_finish };
  75          
  76          enum {ctrl_adc_start = 1,
  77                                  ctrl_rtc_rd,
  78                                  ctrl_adc_finish,
  79                                  ctrl_rtc_cs1,
  80                                  ctrl_rtc_cs0 = 6,
  81                                  ctrl_rtc_wr };
  82          
  83          sbit dec0 = P3^0;
  84          sbit dec1 = P3^1;               
  85          sbit dec2 = P3^2;
  86          sbit dec3 = P3^3;
  87          sbit dec4 = P3^4;
  88          sbit dec5 = P3^5;
  89          
  90          // Menus
  91          
  92          enum {  menu_main,
  93                          menu_memory,
  94                          menu_io };
  95          
  96          // ======================= prototypes =========================== //
  97          
  98          typedef unsigned char byte;
  99          typedef unsigned short word;
 100          typedef enum { false, true } bool;
 101          
 102          struct keypad_data {
 103                  bool k1;
 104                  bool k2;
 105                  bool k3;
 106                  bool k4;
 107                  bool k5;
 108                  bool k6;
 109                  bool k7;
 110                  bool k8;
 111                  bool k9;
 112                  bool k0;
 113                  bool kA;
 114                  bool kB;
 115                  bool kC;
 116                  bool kD;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 3   

 117                  bool kstar;
 118                  bool kpound;
 119          };
 120          
 121          struct time_data {
 122                  byte seconds;
 123                  byte minutes;
 124                  byte hours;
 125                  byte days;
 126                  byte months;
 127                  byte years;
 128                  byte week;
 129          };
 130          
 131          //------- high level prototyeps -------//
 132          void mainMenu( void );
 133          void memoryMenu( void );
 134          void ioMenu( void );
 135          void dumpMenu( void );
 136          void tempMenu( void );
 137          
 138          word input4Hex( void );
 139          word inputHex( void );
 140          void waitForKeyRelease( void );
 141          
 142          //------- driver prototypes -------//
 143          void latchSevenSeg( void );
 144          void latchKeypad( void );
 145          void outputSevenSeg( char character );
 146          struct keypad_data getKeysPressed( void );
 147          void displayKeyPressed( struct keypad_data keypad );
 148          
 149          void lcdCmd( byte cmd );
 150          void lcdData( byte dat );
 151          void lcdInit( void );
 152          void lcdClear( void );
 153          void lcdChar( byte character );
 154          void lcdString( volatile char *string );
 155          void lcdLine( int line );
 156          void lcdHexWord( word hex );
 157          void lcdHexByte( byte hex );
 158          void lcdAsciiByte( byte hex );
 159          
 160          float getTemp( void );
 161          
 162          void rtcInit( void );
 163          void rtcBusy( void );
 164          void rtcWrite( byte duhdata );
 165          byte rtcRead( byte duhaddress );
 166          void rtcRegWrite( byte duhstuff );
 167          byte rtcRegRead( byte duhstuff );
 168          void rtcSetTime( struct time_data time );
 169          struct time_data rtcGetTime( void );
 170          void rtcPrintTime( struct time_data *time );
 171          
 172          void missionControl1( int dec );
 173          void missionControl2( int dec );
 174          void msDelay( unsigned msecs );
 175          
 176          // ======================== main ================================ //
 177          
 178          void main(void) {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 4   

 179   1              
 180   1              missionControl1( ctrl_off );
 181   1              missionControl2( ctrl_off );
 182   1              
 183   1              lcdInit();
 184   1              rtcInit();
 185   1      
 186   1              mainMenu();             // Enter main program
 187   1      
 188   1              while(1); // Stay off the streets
 189   1      
 190   1      } // end main()
 191          
 192          // ======================= functions ============================ //
 193          
 194          void mainMenu( void ) { 
 195   1      
 196   1              struct keypad_data keypad;
 197   1      
 198   1              while(1) {
 199   2      
 200   2                      char MenuStr1[] = "Megan Bird CEEN 4330`";
 201   2                      char MenuStr2[] = "--------------------`";
 202   2                      char MenuStr3[] = "Main Menu`";
 203   2                      char MenuStr4[] = "1 : Memory   2 : I/O`";
 204   2              
 205   2                      lcdClear();
 206   2                      lcdString( &MenuStr1 );
 207   2                      lcdLine(2);
 208   2                      lcdString( &MenuStr2 );
 209   2                      lcdLine(3);
 210   2                      lcdString( &MenuStr3 );
 211   2                      lcdLine(4);
 212   2                      lcdString( &MenuStr4 );
 213   2              
 214   2                      while(1) {      
 215   3                              keypad = getKeysPressed();
 216   3                      
 217   3                              if( keypad.k1 == true ) {
 218   4                                      waitForKeyRelease();
 219   4                                      memoryMenu();
 220   4                                      break;
 221   4                              }
 222   3                              else if( keypad.k2 == true ) {
 223   4                                      waitForKeyRelease();
 224   4                                      ioMenu();
 225   4                                      break;
 226   4                              }
 227   3                      } // end option while
 228   2      
 229   2              } // end main while
 230   1      
 231   1      } // end choiceMainMenu()
 232          
 233          // -------------------------------------------------------------- //
 234          
 235          void memoryMenu( void ) {
 236   1      
 237   1              struct keypad_data keypad;
 238   1              bool exit = false;
 239   1      
 240   1              while( exit == false ) {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 5   

 241   2      
 242   2                      char MenuStr1[] = "Memory Menu`";
 243   2                      char MenuStr2[] = "1 : Dump    2 : Move`";
 244   2                      char MenuStr3[] = "3 : Edit    4 : Find`";
 245   2                      char MenuStr4[] = "# : Return to Main  `";
 246   2              
 247   2                      lcdClear();
 248   2                      lcdString( &MenuStr1 );
 249   2                      lcdLine(2);
 250   2                      lcdString( &MenuStr2 );
 251   2                      lcdLine(3);
 252   2                      lcdString( &MenuStr3 );
 253   2                      lcdLine(4);
 254   2                      lcdString( &MenuStr4 );
 255   2              
 256   2                      while(1) {      
 257   3                              keypad = getKeysPressed();
 258   3                      
 259   3                              if( keypad.kpound == true ) {
 260   4                                      exit = true;
 261   4                                      waitForKeyRelease();
 262   4                                      break;
 263   4                              }
 264   3                              else if( keypad.k1 == true ) {
 265   4                                      waitForKeyRelease();
 266   4                                      dumpMenu();
 267   4                                      break;
 268   4                              }
 269   3                              else if( keypad.k2 == true ) {
 270   4                                      waitForKeyRelease();
 271   4                                      lcdChar('2');
 272   4                                      msDelay(2000);
 273   4                                      break;
 274   4                              }
 275   3                              else if( keypad.k3 == true ) {
 276   4                                      waitForKeyRelease();
 277   4                                      lcdChar('3');
 278   4                                      msDelay(2000);
 279   4                                      break;
 280   4                              }
 281   3                              else if( keypad.k4 == true ) {
 282   4                                      waitForKeyRelease();
 283   4                                      lcdChar('4');
 284   4                                      msDelay(2000);
 285   4                                      break;
 286   4                              }
 287   3                      } // end option while
 288   2      
 289   2              } // end main while
 290   1      
 291   1      } // end memoryMenu()
 292          
 293          // -------------------------------------------------------------- //
 294          
 295          void ioMenu( void ) {
 296   1      
 297   1              struct keypad_data keypad;
 298   1              bool exit = false;
 299   1      
 300   1              while( exit == false ) {
 301   2      
 302   2                      char MenuStr1[] = "I/O Menu`";
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 6   

 303   2                      char MenuStr2[] = "1 : Temp    2 : 7Seg`";
 304   2                      char MenuStr3[] = "3 : Time    4 : SetT`";
 305   2                      char MenuStr4[] = "# : Return to Main  `";
 306   2              
 307   2                      lcdClear();
 308   2                      lcdString( &MenuStr1 );
 309   2                      lcdLine(2);
 310   2                      lcdString( &MenuStr2 );
 311   2                      lcdLine(3);
 312   2                      lcdString( &MenuStr3 );
 313   2                      lcdLine(4);
 314   2                      lcdString( &MenuStr4 );
 315   2              
 316   2                      while(1) {      
 317   3                              keypad = getKeysPressed();
 318   3                      
 319   3                              if( keypad.kpound == true ) {
 320   4                                      exit = true;
 321   4                                      waitForKeyRelease();
 322   4                                      break;
 323   4                              }
 324   3                              else if( keypad.k1 == true ) {
 325   4                                      waitForKeyRelease();
 326   4                                      tempMenu();
 327   4                                      break;
 328   4                              }
 329   3                              else if( keypad.k2 == true ) {
 330   4                                      waitForKeyRelease();
 331   4                                      lcdChar('2');
 332   4                                      msDelay(2000);
 333   4                                      break;
 334   4                              }
 335   3                              else if( keypad.k3 == true ) {
 336   4                                      waitForKeyRelease();
 337   4                                      lcdChar('3');
 338   4                                      msDelay(2000);
 339   4                                      break;
 340   4                              }
 341   3                              else if( keypad.k4 == true ) {
 342   4                                      waitForKeyRelease();
 343   4                                      lcdChar('4');
 344   4                                      msDelay(2000);
 345   4                                      break;
 346   4                              }
 347   3                      } // end option while
 348   2      
 349   2              } // end main while
 350   1      
 351   1      } // end ioMenu()
 352          
 353          // -------------------------------------------------------------- //
 354          
 355          void dumpMenu( void ) {
 356   1      
 357   1              struct keypad_data keypad;
 358   1              bool exit;
 359   1              word segment;
 360   1              word block;
 361   1              word offset;
 362   1              byte memVal;
 363   1              int i;
 364   1              
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 7   

 365   1              char MenuStr1[] = "Dump Setup`";
 366   1              char MenuStr2[] = "Start Addr: `";
 367   1              char MenuStr3[] = "Block Size: `";
 368   1              char MenuStr4[] = "1:<--  2:-->  #:Exit`";
 369   1      
 370   1              exit = false;
 371   1              segment = 0x0000;
 372   1              block = 0xFFFF;
 373   1              offset = 0x0000;
 374   1      
 375   1              //----------------//
 376   1              //   Dump Setup   //
 377   1              //----------------//
 378   1      
 379   1              // print header and footer
 380   1              lcdClear();
 381   1              lcdString( &MenuStr1 );
 382   1      
 383   1              // address prompt
 384   1              lcdLine(3);
 385   1              lcdString( &MenuStr2 );
 386   1              // read 4 hex digits from keypad
 387   1              segment = input4Hex(); 
 388   1      
 389   1              // block size prompt
 390   1              lcdLine(4);
 391   1              lcdString( &MenuStr3 );
 392   1              // read 4 hex digits from keypad
 393   1              block = input4Hex();
 394   1      
 395   1              //------------------//
 396   1              //   Dump Display   //
 397   1              //------------------//
 398   1      
 399   1              while( exit == false ) {
 400   2      
 401   2                      // print segment:offset
 402   2                      lcdClear();
 403   2                      lcdHexWord( segment );
 404   2                      lcdChar(':');
 405   2                      lcdHexWord( offset );
 406   2      
 407   2                      // print hex values
 408   2                      lcdLine(2);
 409   2                      for( i = 0; i < 7; i++ ) {
 410   3                              if( (offset + i) < block ) {
 411   4                                      memVal = XBYTE[ (segment * 16) + offset + i ]; // get seg:offset+i
 412   4                                      lcdHexByte( memVal );   // print value
 413   4                                      if( i < 6 ) {
 414   5                                              lcdChar(' ');           // print space if not last one on line
 415   5                                      }
 416   4                              }
 417   3                      }
 418   2      
 419   2                      // print ascii values
 420   2                      lcdLine(3);
 421   2                      for( i = 0; i < 7; i++ ) {
 422   3                              if( (offset + i) < block ) {
 423   4                                      memVal = XBYTE[ (segment * 16) + offset + i ]; // get seg:offset+i
 424   4                                      lcdAsciiByte( memVal ); // print value
 425   4                                      lcdChar(' ');
 426   4                                      if( i < 6 ) {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 8   

 427   5                                              lcdChar(' ');           // print space if not last one on line
 428   5                                      }
 429   4                              }
 430   3                      }
 431   2      
 432   2                      // print footer
 433   2                      lcdLine(4);
 434   2                      lcdString( &MenuStr4 );         
 435   2                              
 436   2                      while(1) {      
 437   3                              keypad = getKeysPressed();
 438   3                      
 439   3                              if( keypad.kpound == true ) {
 440   4                                      exit = true;
 441   4                                      waitForKeyRelease();
 442   4                                      break;
 443   4                              }
 444   3                              else if( keypad.k1 == true ) {
 445   4                                      waitForKeyRelease();
 446   4                                      // if decremented offset is less than start (0),
 447   4                                      if( offset >= 7 ) {
 448   5                                              //      revert (-7) and do nothing
 449   5                                              offset -= 7;
 450   5                                      }
 451   4                                      break;
 452   4                              }
 453   3                              else if( keypad.k2 == true ) {
 454   4                                      waitForKeyRelease();
 455   4                                      // increment offset by 7
 456   4                                      offset += 7;
 457   4                                      // if incremented offset is past block size,
 458   4                                      if( offset > block ) {
 459   5                                              //      revert (-7) and do nothing
 460   5                                              offset -= 7;
 461   5                                      }
 462   4                                      break;
 463   4                              }
 464   3                      } // end option while
 465   2      
 466   2              } // end main while
 467   1      
 468   1      } // end dumpMenu()
 469          
 470          // -------------------------------------------------------------- //
 471          
 472          void tempMenu( void ) {
 473   1      
 474   1              struct keypad_data keypad;
 475   1              bool exit = false;
 476   1              int i = 0;
 477   1      
 478   1              while( exit == false ) {
 479   2      
 480   2                      char MenuStr1[] = "Current Temperature`";
 481   2                      char MenuStr2[] = "+00.0 F`";
 482   2                      //char MenuStr3[] = " `";
 483   2                      char MenuStr4[] = "# : Return to I/O   `";
 484   2              
 485   2                      lcdClear();
 486   2                      lcdString( &MenuStr1 );
 487   2      
 488   2                      lcdLine(2);
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 9   

 489   2                      sprintf( MenuStr2, "%+5.1f F`", getTemp() );
 490   2                      lcdString( &MenuStr2 );
 491   2      
 492   2                      //lcdLine(3);
 493   2                      //lcdString( &MenuStr3 );
 494   2                      lcdLine(4);
 495   2                      lcdString( &MenuStr4 );
 496   2              
 497   2                      while(1) {      
 498   3      
 499   3                              // slow LCD temp refresh rate down
 500   3                              if ( i == 1000 ) {
 501   4                                      lcdLine(2);
 502   4                                      sprintf( MenuStr2, "%+5.1f F`", getTemp() );
 503   4                                      lcdString( &MenuStr2 );
 504   4                                      i = 0;
 505   4                              }
 506   3                              else {
 507   4                                      i++;
 508   4                              }
 509   3      
 510   3                              keypad = getKeysPressed();
 511   3                      
 512   3                              if( keypad.kpound == true ) {
 513   4                                      exit = true;
 514   4                                      waitForKeyRelease();
 515   4                                      break;
 516   4                              }
 517   3                              else if( keypad.k1 == true ) {
 518   4                                      waitForKeyRelease();
 519   4                                      lcdChar('1');
 520   4                                      msDelay(2000);
 521   4                                      break;
 522   4                              }
 523   3                              else if( keypad.k2 == true ) {
 524   4                                      waitForKeyRelease();
 525   4                                      lcdChar('2');
 526   4                                      msDelay(2000);
 527   4                                      break;
 528   4                              }
 529   3                              else if( keypad.k3 == true ) {
 530   4                                      waitForKeyRelease();
 531   4                                      lcdChar('3');
 532   4                                      msDelay(2000);
 533   4                                      break;
 534   4                              }
 535   3                              else if( keypad.k4 == true ) {
 536   4                                      waitForKeyRelease();
 537   4                                      lcdChar('4');
 538   4                                      msDelay(2000);
 539   4                                      break;
 540   4                              }
 541   3                      } // end option while
 542   2      
 543   2              } // end main while
 544   1      
 545   1      } // end tempMenu()
 546          
 547          // -------------------------------------------------------------- //
 548          
 549          word input4Hex( void ) {
 550   1      
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 10  

 551   1              word segment;
 552   1              word input;
 553   1              int i;
 554   1              
 555   1              segment = 0x0000;
 556   1      
 557   1              for( i = 0; i < 4; i++ ) {
 558   2                      segment = segment << 4;
 559   2                      input = inputHex();
 560   2                      segment = segment + input;
 561   2              }
 562   1         
 563   1              return segment;
 564   1      
 565   1      } // end read4Hex()
 566          
 567          // -------------------------------------------------------------- //
 568          
 569          word inputHex( void ) {
 570   1      
 571   1              struct keypad_data keypad;
 572   1              word value;
 573   1              byte ascii;
 574   1              
 575   1              
 576   1              value = 0xFFFF;
 577   1              ascii = 0x7E;
 578   1              
 579   1              while( value == 0xFFFF ) {
 580   2                
 581   2                      keypad = getKeysPressed();
 582   2      
 583   2                      if( keypad.k0 == true ) {
 584   3                              value = 0x0000;
 585   3                              ascii = 0x30;
 586   3                      }
 587   2                      if( keypad.k1 == true ) {
 588   3                              value = 0x0001;
 589   3                              ascii = 0x31;
 590   3                      }
 591   2                      if( keypad.k2 == true ) {
 592   3                              value = 0x0002;
 593   3                              ascii = 0x32;
 594   3                      }
 595   2                      if( keypad.k3 == true ) {
 596   3                              value = 0x0003;
 597   3                              ascii = 0x33;
 598   3                      }
 599   2                      if( keypad.k4 == true ) {
 600   3                              value = 0x0004;
 601   3                              ascii = 0x34;
 602   3                      }
 603   2                      if( keypad.k5 == true ) {
 604   3                              value = 0x0005;
 605   3                              ascii = 0x35;
 606   3                      }
 607   2                      if( keypad.k6 == true ) {
 608   3                              value = 0x0006;
 609   3                              ascii = 0x36;
 610   3                      }
 611   2                      if( keypad.k7 == true ) {
 612   3                              value = 0x0007;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 11  

 613   3                              ascii = 0x37;
 614   3                      }
 615   2                      if( keypad.k8 == true ) {
 616   3                              value = 0x0008;
 617   3                              ascii = 0x38;
 618   3                      }
 619   2                      if( keypad.k9 == true ) {
 620   3                              value = 0x0009;
 621   3                              ascii = 0x39;
 622   3                      }
 623   2                      if( keypad.kA == true ) {
 624   3                              value = 0x000A;
 625   3                              ascii = 0x41;
 626   3                      }
 627   2                      if( keypad.kB == true ) {
 628   3                              value = 0x000B;
 629   3                              ascii = 0x42;
 630   3                      }
 631   2                      if( keypad.kC == true ) {
 632   3                              value = 0x000C;
 633   3                              ascii = 0x43;
 634   3                      }
 635   2                      if( keypad.kD == true ) {
 636   3                              value = 0x000D;
 637   3                              ascii = 0x44;
 638   3                      }
 639   2                      if( keypad.kstar == true ) {
 640   3                              value = 0x000E;
 641   3                              ascii = 0x45;
 642   3                      }
 643   2                      if( keypad.kpound == true ) {
 644   3                              value = 0x000F;
 645   3                              ascii = 0x46;
 646   3                      }
 647   2      
 648   2              } // end while
 649   1      
 650   1              lcdChar( ascii );
 651   1      
 652   1              waitForKeyRelease();
 653   1              return value;   
 654   1      
 655   1      } // end readHex()
 656          
 657          // -------------------------------------------------------------- //
 658          
 659          void waitForKeyRelease( void ) {
 660   1      
 661   1              struct keypad_data keypad;
 662   1              bool exit = false;
 663   1              
 664   1              while( exit == false ) {
 665   2      
 666   2                      exit = true;
 667   2                      keypad = getKeysPressed();
 668   2      
 669   2                      if( keypad.k0 == true ) {
 670   3                              exit = false;
 671   3                      }
 672   2                      if( keypad.k1 == true ) {
 673   3                              exit = false;
 674   3                      }
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 12  

 675   2                      if( keypad.k2 == true ) {
 676   3                              exit = false;
 677   3                      }
 678   2                      if( keypad.k3 == true ) {
 679   3                              exit = false;
 680   3                      }
 681   2                      if( keypad.k4 == true ) {
 682   3                              exit = false;
 683   3                      }
 684   2                      if( keypad.k5 == true ) {
 685   3                              exit = false;
 686   3                      }
 687   2                      if( keypad.k6 == true ) {
 688   3                              exit = false;
 689   3                      }
 690   2                      if( keypad.k7 == true ) {
 691   3                              exit = false;
 692   3                      }
 693   2                      if( keypad.k8 == true ) {
 694   3                              exit = false;
 695   3                      }
 696   2                      if( keypad.k9 == true ) {
 697   3                              exit = false;
 698   3                      }
 699   2                      if( keypad.kA == true ) {
 700   3                              exit = false;
 701   3                      }
 702   2                      if( keypad.kB == true ) {
 703   3                              exit = false;
 704   3                      }
 705   2                      if( keypad.kC == true ) {
 706   3                              exit = false;
 707   3                      }
 708   2                      if( keypad.kD == true ) {
 709   3                              exit = false;
 710   3                      }
 711   2                      if( keypad.kstar == true ) {
 712   3                              exit = false;
 713   3                      }
 714   2                      if( keypad.kpound == true ) {
 715   3                              exit = false;
 716   3                      }
 717   2      
 718   2              } // end while    
 719   1      
 720   1      } // end waitForKeyRelease()
 721          
 722          // -------------------------------------------------------------- //
 723          
 724          void latchSevenSeg( void ) {
 725   1              
 726   1      //      cs_sevenSeg = 1;
 727   1      //      cs_sevenSeg = 0;
 728   1              
 729   1              missionControl1( ctrl_ss_latch );
 730   1              missionControl1( ctrl_off );
 731   1              
 732   1      } // end latchSevenSeg()
 733          
 734          // -------------------------------------------------------------- //
 735          
 736          void latchKeypad( void ) {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 13  

 737   1              
 738   1      //      cs_keypad = 1;
 739   1      //      cs_keypad = 0;
 740   1              
 741   1              missionControl1( ctrl_kp_oelatch );
 742   1              missionControl1( ctrl_kp_oe );
 743   1              
 744   1      } // end latchKeypad()
 745          
 746          // -------------------------------------------------------------- //
 747          
 748          //void latchLCD( void ) {
 749          //      
 750          //      cs_lcd = 1;
 751          //      cs_lcd = 0;
 752          //      
 753          //} // end latchLCD()
 754          
 755          // -------------------------------------------------------------- //
 756          
 757          void outputSevenSeg( char character ) {
 758   1              
 759   1              switch( character ) {
 760   2                      case '0': sevenSegPort = ~0x3F; break;
 761   2                      case '1':       sevenSegPort = ~0x06; break;
 762   2                      case '2': sevenSegPort = ~0x5B; break;
 763   2                      case '3': sevenSegPort = ~0x4F; break;
 764   2                      case '4': sevenSegPort = ~0x66; break;
 765   2                      case '5': sevenSegPort = ~0x6D; break;
 766   2                      case '6': sevenSegPort = ~0x7D; break;
 767   2                      case '7': sevenSegPort = ~0x07; break;
 768   2                      case '8': sevenSegPort = ~0x7F; break;
 769   2                      case '9': sevenSegPort = ~0x67; break;
 770   2                      case 'A': sevenSegPort = ~0x77; break;
 771   2                      case 'b': sevenSegPort = ~0x7C; break;
 772   2                      case 'C': sevenSegPort = ~0x39; break;
 773   2                      case 'd': sevenSegPort = ~0x5E; break;
 774   2                      case 'E': sevenSegPort = ~0x79; break;
 775   2                      case 'F': sevenSegPort = ~0x71; break;
 776   2                      case '-': sevenSegPort = 0xBF;  break;
 777   2                      case '.': sevenSegPort = 0x7F;  break;
 778   2                      case 'o':       sevenSegPort = 0xFF;  break;  // off
 779   2                      default:  sevenSegPort = 0xAA;                                  // invalid
 780   2              }
 781   1              
 782   1              latchSevenSeg();
 783   1              
 784   1      } // end outputSevenSeg()
 785          
 786          // -------------------------------------------------------------- //
 787          
 788          struct keypad_data getKeysPressed( void ) {
 789   1              
 790   1              struct keypad_data keypad;
 791   1              
 792   1              // enable keypad latch output
 793   1              //oe_keypad = 0;
 794   1              missionControl1( ctrl_kp_oe );
 795   1              
 796   1              // Set keypad columns as outputs & rows as inputs
 797   1              kCol1 = 0;
 798   1              kCol2 = 0;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 14  

 799   1              kCol3 = 0;
 800   1              kCol4 = 0;
 801   1              kRow1 = 1;
 802   1              kRow2 = 1;
 803   1              kRow3 = 1;
 804   1              kRow4 = 1;
 805   1              
 806   1              // scan by columns
 807   1      
 808   1              // column 1
 809   1              kCol1 = 0;
 810   1              kCol2 = 1;
 811   1              kCol3 = 1;
 812   1              kCol4 = 1;
 813   1              latchKeypad();
 814   1              
 815   1              if (kRow1 == 0) {
 816   2                      keypad.k1 = 1;
 817   2              }
 818   1              else {
 819   2                      keypad.k1 = 0;
 820   2              }
 821   1              if (kRow2 == 0) {
 822   2                      keypad.k4 = 1;
 823   2              }
 824   1              else {
 825   2                      keypad.k4 = 0;
 826   2              }
 827   1              if (kRow3 == 0) {
 828   2                      keypad.k7 = 1;
 829   2              }
 830   1              else {
 831   2                      keypad.k7 = 0;
 832   2              }
 833   1              if (kRow4 == 0) {
 834   2                      keypad.kstar = 1;
 835   2              }
 836   1              else {
 837   2                      keypad.kstar = 0;
 838   2              }
 839   1              kCol1 = 1;
 840   1              
 841   1              // column 2
 842   1              kCol2 = 0;
 843   1              latchKeypad();
 844   1              
 845   1              if (kRow1 == 0) {
 846   2                      keypad.k2 = 1;
 847   2              }
 848   1              else {
 849   2                      keypad.k2 = 0;
 850   2              }
 851   1              if (kRow2 == 0) {
 852   2                      keypad.k5 = 1;
 853   2              }
 854   1              else {
 855   2                      keypad.k5 = 0;
 856   2              }
 857   1              if (kRow3 == 0) {
 858   2                      keypad.k8 = 1;
 859   2              }
 860   1              else {
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 15  

 861   2                      keypad.k8 = 0;
 862   2              }
 863   1              if (kRow4 == 0) {
 864   2                      keypad.k0 = 1;
 865   2              }
 866   1              else {
 867   2                      keypad.k0 = 0;
 868   2              }
 869   1              kCol2 = 1;
 870   1              
 871   1              // column 3
 872   1              kCol3 = 0;
 873   1              latchKeypad();
 874   1              
 875   1              if (kRow1 == 0) {
 876   2                      keypad.k3 = 1;
 877   2              }
 878   1              else {
 879   2                      keypad.k3 = 0;
 880   2              }
 881   1              if (kRow2 == 0) {
 882   2                      keypad.k6 = 1;
 883   2              }
 884   1              else {
 885   2                      keypad.k6 = 0;
 886   2              }
 887   1              if (kRow3 == 0) {
 888   2                      keypad.k9 = 1;
 889   2              }
 890   1              else {
 891   2                      keypad.k9 = 0;
 892   2              }
 893   1              if (kRow4 == 0) {
 894   2                      keypad.kpound = 1;
 895   2              }
 896   1              else {
 897   2                      keypad.kpound = 0;
 898   2              }
 899   1              kCol3 = 1;
 900   1              
 901   1              // column 4
 902   1              kCol4 = 0;
 903   1              latchKeypad();
 904   1              
 905   1              if (kRow1 == 0) {
 906   2                      keypad.kA = 1;
 907   2              }
 908   1              else {
 909   2                      keypad.kA = 0;
 910   2              }
 911   1              if (kRow2 == 0) {
 912   2                      keypad.kB = 1;
 913   2              }
 914   1              else {
 915   2                      keypad.kB = 0;
 916   2              }
 917   1              if (kRow3 == 0) {
 918   2                      keypad.kC = 1;
 919   2              }
 920   1              else {
 921   2                      keypad.kC = 0;
 922   2              }
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 16  

 923   1              if (kRow4 == 0) {
 924   2                      keypad.kD = 1;
 925   2              }
 926   1              else {
 927   2                      keypad.kD = 0;
 928   2              }
 929   1              kCol4 = 1;
 930   1              latchKeypad();
 931   1              
 932   1              // disable keypad latch output
 933   1              //oe_keypad = 1;
 934   1              missionControl1( ctrl_off );
 935   1              
 936   1              return keypad; 
 937   1              
 938   1      } // end getKeysPressed()
 939          
 940          // -------------------------------------------------------------- //
 941          
 942          void displayKeyPressed( struct keypad_data keypad ) {
 943   1              
 944   1              if ( keypad.k1 == 1 ) {
 945   2                      outputSevenSeg('1');
 946   2              }
 947   1              else if ( keypad.k2 == 1 ) {
 948   2                      outputSevenSeg('2');
 949   2              }
 950   1              else if ( keypad.k3 == 1 ) {
 951   2                      outputSevenSeg('3');
 952   2              }
 953   1              else if ( keypad.k4 == 1 ) {
 954   2                      outputSevenSeg('4');
 955   2              }
 956   1              else if ( keypad.k5 == 1 ) {
 957   2                      outputSevenSeg('5');
 958   2              }
 959   1              else if ( keypad.k6 == 1 ) {
 960   2                      outputSevenSeg('6');
 961   2              }
 962   1              else if ( keypad.k7 == 1 ) {
 963   2                      outputSevenSeg('7');
 964   2              }
 965   1              else if ( keypad.k8 == 1 ) {
 966   2                      outputSevenSeg('8');
 967   2              }
 968   1              else if ( keypad.k9 == 1 ) {
 969   2                      outputSevenSeg('9');
 970   2              }
 971   1              else if ( keypad.kA == 1 ) {
 972   2                      outputSevenSeg('A');
 973   2              }
 974   1              else if ( keypad.k0 == 1 ) {
 975   2                      outputSevenSeg('0');
 976   2              }
 977   1              else if ( keypad.kB == 1 ) {
 978   2                      outputSevenSeg('b');
 979   2              }
 980   1              else if ( keypad.kC == 1 ) {
 981   2                      outputSevenSeg('C');
 982   2              }
 983   1              else if ( keypad.kD == 1 ) {
 984   2                      outputSevenSeg('d');
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 17  

 985   2              }
 986   1              else if ( keypad.kstar == 1 ) {
 987   2                      outputSevenSeg('.');
 988   2              }
 989   1              else if ( keypad.kpound == 1 ) {
 990   2                      outputSevenSeg('-');
 991   2              }
 992   1              else {
 993   2                      outputSevenSeg('o');
 994   2              }
 995   1              
 996   1      } // end displayKeyPressed()
 997                  
 998          // -------------------------------------------------------------- //
 999          
1000          void lcdCmd( byte cmd ) {
1001   1              
1002   1              //rs_lcd = 0;                   // reg select low for command
1003   1              // --- RW tied low for write --- //
1004   1              //e_lcd = 1;                    // E high for pulse
1005   1              
1006   1              missionControl1( ctrl_lcd_cmd_start );
1007   1              
1008   1              lcdPort = cmd;
1009   1              //latchLCD();
1010   1              
1011   1              msDelay(1);                     // Need Tpw > 140 ns
1012   1              //e_lcd = 0;                    // E low to end pulse
1013   1              
1014   1              missionControl1( ctrl_lcd_cmd_finish );
1015   1              
1016   1      } // end lcdCmd()
1017          
1018          // -------------------------------------------------------------- //
1019          
1020          void lcdData( byte dat ) {
1021   1              
1022   1              //rs_lcd = 1;                   // reg select high for data
1023   1              // --- RW tied low for write --- //
1024   1              //e_lcd = 1;                    // E high for pulse
1025   1              
1026   1              missionControl1( ctrl_lcd_data_start );
1027   1              
1028   1              lcdPort = dat;
1029   1              //latchLCD();
1030   1              
1031   1              msDelay(1);                     // Need Tpw > 140 ns
1032   1              //e_lcd = 0;                    // E low to end pulse
1033   1              
1034   1              missionControl1( ctrl_lcd_data_finish );
1035   1              
1036   1      } // end lcdData()
1037          
1038          // -------------------------------------------------------------- //
1039          
1040          void lcdInit( void ) {  
1041   1              
1042   1              msDelay(50);
1043   1              lcdCmd(0x38);                   // Function set
1044   1              msDelay(5);
1045   1              lcdCmd(0x38);                   // Function set
1046   1              msDelay(1);
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 18  

1047   1              lcdCmd(0x0F);                   // Display ON/OFF control
1048   1              msDelay(1);
1049   1              lcdCmd(0x01);                   // Clear display
1050   1              msDelay(2);
1051   1              
1052   1      } // end lcdInit()
1053          
1054          // -------------------------------------------------------------- //
1055          
1056          void lcdClear( void ) {
1057   1              
1058   1              lcdCmd(0x01);                   // Clear display
1059   1              msDelay(2);
1060   1              
1061   1      } // end lcdClear()
1062          
1063          // -------------------------------------------------------------- //
1064          
1065          void lcdChar( byte character ) {
1066   1              
1067   1              lcdData(character);             // send character
1068   1              
1069   1      } // end lcdChar()
1070          
1071          // -------------------------------------------------------------- //
1072          
1073          void lcdString( volatile char *string ) {
1074   1              
1075   1              int i = 0;
1076   1              while( string[i] != '`') {
1077   2                      lcdChar( string[i] );
1078   2                      i++;
1079   2              }
1080   1              
1081   1      } // end lcdString()
1082          
1083          // -------------------------------------------------------------- //
1084          
1085          void lcdLine( int line ) {
1086   1              
1087   1              switch (line) {
1088   2                      case 1: {
1089   3                              lcdCmd(0x80);
1090   3                              break;
1091   3                      }
1092   2                      case 2: {
1093   3                              lcdCmd(0xC0);
1094   3                              break;
1095   3                      }
1096   2                      case 3: {
1097   3                              lcdCmd(0x94);
1098   3                              break;
1099   3                      }
1100   2                      case 4: {
1101   3                              lcdCmd(0xD4);
1102   3                              break;
1103   3                      }
1104   2                      default:
1105   2                              lcdCmd(0x80);
1106   2                      
1107   2              } // end switch
1108   1              
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 19  

1109   1      } // end lcdLine()
1110          
1111          // -------------------------------------------------------------- //
1112          
1113          void lcdHexWord( word hex ) {
1114   1      
1115   1              char hexStr[] = "--------`";
1116   1      
1117   1              sprintf( hexStr, "%04X`", (int)hex );
1118   1              lcdString( &hexStr );
1119   1      
1120   1      } // end lcdHexWord()
1121          
1122          // -------------------------------------------------------------- //
1123          
1124          void lcdHexByte( byte hex ) {
1125   1      
1126   1              char hexStr[] = "-----`";
1127   1      
1128   1              sprintf( hexStr, "%02X`", (int)hex );
1129   1              lcdString( &hexStr );
1130   1      
1131   1      } // end lcdHexWord()
1132          
1133          // -------------------------------------------------------------- //
1134          
1135          void lcdAsciiByte( byte hex ) {
1136   1      
1137   1      //      char hexStr[] = "-----`";
1138   1      //
1139   1      //      sprintf( hexStr, "%1c`", (int)hex );
1140   1      //      lcdString( &hexStr );
1141   1      
1142   1              lcdChar( hex );
1143   1      
1144   1      } // end lcdHexWord()
1145          
1146          // -------------------------------------------------------------- //
1147          
1148          float getTemp( void ) {
1149   1              
1150   1              //------------ IDEA ------------------------------------------//
1151   1              // change to pass in C or F and returns corresponding value.  //
1152   1              
1153   1              int i = 0;
1154   1              byte sample = 0;
1155   1              float voltage = 0;
1156   1              float degC = 0;
1157   1              float degF = 0;
1158   1              int degCint = 0;
1159   1      //      char tempCStr[] = "+00.0 C`";
1160   1      //      char tempFStr[] = "+00.0 F`";
1161   1      //      char voltStr[] = "+0.0 V`";
1162   1      //      char sampStr[] = "55555555`";
1163   1              
1164   1                      missionControl2( ctrl_adc_start );
1165   1                      missionControl2( ctrl_adc_finish );
1166   1                      sample = adcPort;
1167   1                      missionControl2( ctrl_off );
1168   1                      
1169   1                      // voltage reading in 0.3V higher than measured on board
1170   1                      voltage = sample * 5 / 256;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 20  

1171   1                      //voltage = voltage - 0.25;
1172   1                      degC = (voltage - 0.5) * 100;
1173   1                      degF = degC * (9.0/5.0) + 32.0;
1174   1                      
1175   1                      return degF;
1176   1                      
1177   1      //              sprintf( sampStr, "%c`", sample );
1178   1      //              sprintf( voltStr, "%+4.1f V`", voltage );
1179   1      //              sprintf( tempCStr, "%+5.1f C`", degC );
1180   1      //              sprintf( tempFStr, "%+5.1f F`", degF );
1181   1                      
1182   1      //              lcdLine(1);
1183   1      //              lcdString( &sampStr );
1184   1      //              lcdLine(2);
1185   1      //              lcdString( &voltStr );
1186   1      //              lcdLine(3);
1187   1      //              lcdString( &tempCStr );
1188   1      //              lcdLine(4);
1189   1      //              lcdString( &tempFStr );
1190   1              
1191   1      } // end getDegF()
1192          
1193          // -------------------------------------------------------------- //
1194          
1195          void rtcInit( void ) {
1196   1              
1197   1              struct time_data time;
1198   1      
1199   1              time.week = 0;
1200   1              time.years = 17;
1201   1              time.months = 3;
1202   1              time.days = 26;
1203   1              time.hours = 12;
1204   1              time.minutes = 21;
1205   1              time.seconds = 0;
1206   1                      
1207   1              // (A)  Start the counter
1208   1              //                      Inititalize the control registers
1209   1              rtcWrite( 0xF4 );               // Set the CF register to 0100b = 4h
1210   1              rtcWrite( 0xD4 );               // Set the CD register to 0100b = 4h
1211   1              
1212   1              // (B)  Check the status of the BUSY bit
1213   1              rtcBusy();      
1214   1              
1215   1              // (C)  STOP and RESET the counter
1216   1              rtcWrite( 0xF7 );               // Set the CF register to 0111b = 7h
1217   1              
1218   1              // Set the current time in the registers
1219   1              //              (initizlize the S1 to W registers)
1220   1              rtcSetTime( time ); 
1221   1              
1222   1              // (A)  Start the counter and release the HOLD status
1223   1              rtcWrite( 0xF4 );               // Set the CF register to 0100b = 4h
1224   1              rtcWrite( 0xD5 );               // Set the CD register to 0101b = 5h
1225   1              
1226   1      } // end rtcInit()
1227          
1228          // -------------------------------------------------------------- //
1229          
1230          void rtcBusy( void ) {
1231   1              
1232   1              byte duhdata;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 21  

1233   1              
1234   1              rtcWrite( 0xD5 );                                               // Hold bit <- 1
1235   1              duhdata = rtcRead( 0x0D );      // Read from D to get BUSY// Read the BUSY bit
1236   1      
1237   1              // If BUSY bit = 0, cont., else HOLD bit <- 0
1238   1              while( duhdata & 0x02 == 2 ) {
1239   2                      rtcWrite( 0xD4 );                                               // HOLD bit <- 0
1240   2                      rtcWrite( 0xD5 );                                               // HOLD bit <- 1
1241   2                      duhdata = rtcRead( 0x0D );      // Read from D to get BUSY// Read the BUSY bit
1242   2              }       
1243   1              
1244   1      } // end rtcBusy()
1245          
1246          // -------------------------------------------------------------- //
1247          
1248          void rtcWrite( byte duhdata ) {
1249   1              
1250   1              missionControl2( ctrl_rtc_cs1 );        // set CS1 high
1251   1              rtcPort = duhdata;                                      // send duhdata
1252   1              missionControl2( ctrl_rtc_cs0 );        // set CS0 low
1253   1              missionControl2( ctrl_rtc_wr );         // set WR low
1254   1              missionControl2( ctrl_rtc_cs0 );        // set WR high
1255   1              missionControl2( ctrl_rtc_cs1 );        // set CS0 high
1256   1              missionControl2( ctrl_off );            // set CS1 low
1257   1              
1258   1      } // end rtcWrite()
1259          
1260          // -------------------------------------------------------------- //
1261          
1262          byte rtcRead( byte duhaddress ) {
1263   1              
1264   1              byte duhdata = 0x00;
1265   1              
1266   1              duhaddress = duhaddress << 4;
1267   1              duhaddress = duhaddress | 0x0F;
1268   1              
1269   1              missionControl2( ctrl_rtc_cs1 );        // set CS1 high
1270   1              rtcPort = duhaddress;                           // send duhaddress
1271   1              missionControl2( ctrl_rtc_cs0 );        // set CS0 low
1272   1              missionControl2( ctrl_rtc_rd );         // set RD low
1273   1              duhdata = rtcPort;                                      // read duhdata
1274   1              duhdata &= 0x0F;                                        // mask upper nibble of value read in
1275   1              missionControl2( ctrl_rtc_cs0 );        // set RD high
1276   1              missionControl2( ctrl_rtc_cs1 );        // set CS0 high
1277   1              missionControl2( ctrl_off );            // set CS1 low
1278   1              
1279   1              return duhdata;
1280   1              
1281   1      } // end rtcRead()
1282          
1283          // -------------------------------------------------------------- //
1284          
1285          void rtcRegWrite( byte duhstuff ) {
1286   1              
1287   1              rtcBusy();
1288   1              rtcWrite( duhstuff );
1289   1              // HOLD bit <- 0 by rtcWrite when CS1 is cleared
1290   1              
1291   1      } // end rtcRegWrite()
1292          
1293          // -------------------------------------------------------------- //
1294          
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 22  

1295          byte rtcRegRead( byte duhstuff ) {
1296   1              
1297   1              byte duhdata;
1298   1      
1299   1              rtcBusy();
1300   1              duhdata = rtcRead( duhstuff );
1301   1              // HOLD bit <- 0 by rtcWrite when CS1 is cleared
1302   1              return duhdata;
1303   1              
1304   1      } // end rtcRegWrite()
1305          
1306          // -------------------------------------------------------------- //
1307          
1308          void rtcSetTime( struct time_data time ) {
1309   1              
1310   1              byte s1, s10, mi1, mi10, h1, h10, d1, d10, mo1, mo10, y1, y10;
1311   1              
1312   1              // 1-second
1313   1              s1 = time.seconds % 10;
1314   1              rtcRegWrite( 0x00 | s1 );
1315   1              
1316   1              // 10-second
1317   1              s10 = time.seconds / 10;
1318   1              rtcRegWrite( 0x10 | s10 );
1319   1              
1320   1              // 1-minute
1321   1              mi1 = time.minutes % 10;
1322   1              rtcRegWrite( 0x20 | mi1 );
1323   1              
1324   1              // 10-minute
1325   1              mi10 = time.minutes / 10;
1326   1              rtcRegWrite( 0x30 | mi10 );
1327   1              
1328   1              // 1-hour
1329   1              h1 = time.hours % 10;
1330   1              rtcRegWrite( 0x40 | h1 );
1331   1              
1332   1              // 10-hour
1333   1              h10 = time.hours / 10;
1334   1              rtcRegWrite( 0x50 | h10 );
1335   1              
1336   1              // 1-day
1337   1              d1 = time.days % 10;
1338   1              rtcRegWrite( 0x60 | d1 );
1339   1              
1340   1              // 10-day
1341   1              d10 = time.days / 10;
1342   1              rtcRegWrite( 0x70 | d10 );
1343   1              
1344   1              // 1-month
1345   1              mo1 = time.months % 10;
1346   1              rtcRegWrite( 0x80 | mo1 );
1347   1              
1348   1              // 10-month
1349   1              mo10 = time.months / 10;
1350   1              rtcRegWrite( 0x90 | mo10 );
1351   1              
1352   1              // 1-year
1353   1              y1 = time.years % 10;
1354   1              rtcRegWrite( 0xA0 | y1 );
1355   1              
1356   1              // 10-year
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 23  

1357   1              y10 = time.years / 10;
1358   1              rtcRegWrite( 0xB0 | y10 );
1359   1              
1360   1              // Day of the week
1361   1              rtcRegWrite( 0xC0 | time.week );
1362   1              
1363   1      } // end rtcSetTime()
1364          
1365          // -------------------------------------------------------------- //
1366          
1367          struct time_data rtcGetTime( void ) {
1368   1              
1369   1              struct time_data time;
1370   1              byte s1, s10, mi1, mi10, h1, h10, d1, d10, mo1, mo10, y1, y10, w;
1371   1              
1372   1              s1 = rtcRegRead( 0x00 );
1373   1              s10 = rtcRegRead( 0x01 );
1374   1              time.seconds = s1 + ( s10 * 10 );
1375   1      
1376   1              mi1 = rtcRegRead( 0x02 );
1377   1              mi10 = rtcRegRead( 0x03 );
1378   1              time.minutes = mi1 + ( mi10 * 10 );
1379   1      
1380   1              h1 = rtcRegRead( 0x04 );
1381   1              h10 = rtcRegRead( 0x05 );
1382   1              time.hours = h1 + ( h10 * 10 );
1383   1      
1384   1              d1 = rtcRegRead( 0x06 );
1385   1              d10 = rtcRegRead( 0x07 );
1386   1              time.days = d1 + ( d10 * 10 );
1387   1      
1388   1              mo1 = rtcRegRead( 0x08 );
1389   1              mo10 = rtcRegRead( 0x09 );
1390   1              time.months = mo1 + ( mo10 * 10 );
1391   1      
1392   1              y1 = rtcRegRead( 0x0A );
1393   1              y10 = rtcRegRead( 0x0B );
1394   1              time.years = y1 + ( y10 * 10 );
1395   1      
1396   1              w = rtcRegRead( 0x0C );
1397   1              time.week = w;
1398   1      
1399   1              return time;
1400   1              
1401   1      } // end rtcSetTime()
1402          
1403          // -------------------------------------------------------------- //
1404          
1405          void rtcPrintTime( struct time_data *time ) {
1406   1      
1407   1              char timeStr[] = "0 00/00/00 00:00:00`";
1408   1      
1409   1              sprintf( timeStr, "%d %02d/%02d/%02d %02d:%02d:%02d`", 
1410   1                              (int)time->week, 
1411   1                              (int)time->months, (int)time->days, (int)time->years, 
1412   1                              (int)time->hours, (int)time->minutes, (int)time->seconds );
1413   1              lcdString( &timeStr );
1414   1      
1415   1      } // end rtcPrintTime()
1416          
1417          // -------------------------------------------------------------- //
1418          
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 24  

1419          void missionControl1( int dec ) {
1420   1              
1421   1              switch ( dec ) {
1422   2                      
1423   2                      // The MSB is changed first to avoid false triggers of the LCD enable
1424   2                      // line as the enable line never goes high when the MSB is low.
1425   2                      case ctrl_off: {
1426   3                              dec2 = 0;
1427   3                              dec1 = 0;
1428   3                              dec0 = 0;
1429   3                              break;
1430   3                      }
1431   2                      case ctrl_ss_latch: {
1432   3                              dec2 = 0;
1433   3                              dec1 = 0;
1434   3                              dec0 = 1;
1435   3                              break;
1436   3                      }
1437   2                      case ctrl_kp_oe: {
1438   3                              dec2 = 0;
1439   3                              dec1 = 1;
1440   3                              dec0 = 0;
1441   3                              break;
1442   3                      }
1443   2                      case ctrl_kp_oelatch: {
1444   3                              dec2 = 0;
1445   3                              dec1 = 1;
1446   3                              dec0 = 1;
1447   3                              break;
1448   3                      }
1449   2                      case ctrl_lcd_cmd_start: {
1450   3                              dec2 = 1;
1451   3                              dec1 = 0;
1452   3                              dec0 = 0;
1453   3                              break;
1454   3                      }
1455   2                      case ctrl_lcd_cmd_finish: {
1456   3                              dec2 = 1;
1457   3                              dec1 = 0;
1458   3                              dec0 = 1;
1459   3                              break;
1460   3                      }
1461   2                      case ctrl_lcd_data_start: {
1462   3                              dec2 = 1;
1463   3                              dec1 = 1;
1464   3                              dec0 = 0;
1465   3                              break;
1466   3                      }
1467   2                      case ctrl_lcd_data_finish: {
1468   3                              dec2 = 1;
1469   3                              dec1 = 1;
1470   3                              dec0 = 1;
1471   3                              break;
1472   3                      }               
1473   2              } // end switch
1474   1              
1475   1      } // end missionControl1()
1476          
1477          // -------------------------------------------------------------- //
1478          
1479          void missionControl2( int dec ) {
1480   1              
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 25  

1481   1              switch ( dec ) {
1482   2                      case ctrl_off: {
1483   3                              dec4 = 0;
1484   3                              dec3 = 0;
1485   3                              dec5 = 0;
1486   3                              break;
1487   3                      }
1488   2                      case ctrl_adc_start: {
1489   3                              dec4 = 0;
1490   3                              dec3 = 1;
1491   3                              dec5 = 0;
1492   3                              break;
1493   3                      }
1494   2                      case ctrl_rtc_rd: {
1495   3                              dec4 = 1;
1496   3                              dec3 = 0;
1497   3                              dec5 = 0;
1498   3                              break;
1499   3                      }
1500   2                      case ctrl_adc_finish: {
1501   3                              dec4 = 1;
1502   3                              dec3 = 1;
1503   3                              dec5 = 0;
1504   3                              break;
1505   3                      }
1506   2                      case ctrl_rtc_cs1: {
1507   3                              dec4 = 0;
1508   3                              dec3 = 0;
1509   3                              dec5 = 1;
1510   3                              break;
1511   3                      }
1512   2                      // not used
1513   2      //              case ctrl_rtc_cs0: {
1514   2      //                      dec5 = 1;
1515   2      //                      dec4 = 0;
1516   2      //                      dec3 = 1;
1517   2      //                      break;
1518   2      //              }
1519   2                      case ctrl_rtc_cs0: {
1520   3                              dec4 = 1;
1521   3                              dec3 = 0;
1522   3                              dec5 = 1;
1523   3                              break;
1524   3                      }
1525   2                      case ctrl_rtc_wr: {
1526   3                              dec4 = 1;
1527   3                              dec3 = 1;
1528   3                              dec5 = 1;
1529   3                              break;
1530   3                      }               
1531   2              } // end switch
1532   1              
1533   1      } // end missionControl2()
1534          
1535          // -------------------------------------------------------------- //
1536          
1537          void msDelay( unsigned msecs ) {
1538   1              
1539   1              unsigned i;
1540   1              unsigned char j;
1541   1              
1542   1              msecs = msecs * 3.23;
C51 COMPILER V9.02   COMPDESIGNPROJECT                                                     04/03/2017 18:03:22 PAGE 26  

1543   1              
1544   1              for(i=0;i<msecs;i++){
1545   2                      for(j=0;j<100;j++);
1546   2              }
1547   1              
1548   1      } // end msDelay()
1549          
1550          // -------------------------------------------------------------- //
1551          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4632    ----
   CONSTANT SIZE    =    440    ----
   XDATA SIZE       =   ----     609
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
