C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/14/2017 15:45:29 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE COMPDESIGNPROJECT
OBJECT MODULE PLACED IN .\Objects\CompDesignProject.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE CompDesignProject.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\
                    -Listings\CompDesignProject.lst) TABS(2) OBJECT(.\Objects\CompDesignProject.obj)

line level    source

   1          #include <REGX55.H>
   2          #include <stdio.h>
   3          
   4          // P1
   5          sbit P1_0 = P1^0;
   6          sbit P1_1 = P1^1;
   7          
   8          
   9          // P3
  10          sbit P3_0 = P3^0;
  11          sbit P3_1 = P3^1;
  12          sbit P3_2 = P3^2;
  13          sbit P3_3 = P3^3;
  14          sbit P3_4 = P3^4;
  15          sbit P3_5 = P3^5;
  16          sbit P3_6 = P3^6;
  17          sbit P3_7 = P3^7;
  18          
  19          // Prototypes
  20          
  21          typedef unsigned char datum;    /* Set the data bus width to 8 bits.  */
  22          datum memTestDataBus(volatile datum * address);
  23          datum * memTestAddressBus(volatile datum * baseAddress, unsigned long nBytes);
  24          
  25          // Main
  26          
  27          void main(void) {
  28   1        datum *addressResult;
  29   1        
  30   1        P1 = 0xFF;    // clear 7-seg
  31   1        
  32   1        addressResult = memTestAddressBus(0x0000,0x8000);
  33   1        if ( addressResult == 0 ) {
  34   2          P1 = 1;
  35   2        }
  36   1        else {
  37   2          P1 = &addressResult;
*** WARNING C260 IN LINE 37 OF CompDesignProject.c: '=': pointer truncation
  38   2        }
  39   1        
  40   1      //  if ( memTestAddressBus(0x8000,0x8000) == 0 ) {
  41   1      //    P1_3 = 0;
  42   1      //  }
  43   1      
  44   1        while(1); // Stay off the streets
  45   1        
  46   1      } // end main()
  47          
  48          /**********************************************************************
  49           *
  50           * Function:    memTestDataBus()
  51           *
  52           * Description: Test the data bus wiring in a memory region by
  53           *              performing a walking 1's test at a fixed address
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/14/2017 15:45:29 PAGE 2   

  54           *              within that region.  The address (and hence the
  55           *              memory region) is selected by the caller.
  56           *
  57           * Notes:       
  58           *
  59           * Returns:     0 if the test succeeds.  
  60           *              A non-zero result is the first pattern that failed.
  61           *
  62           **********************************************************************/
  63          datum memTestDataBus(volatile datum * address)
  64          {
  65   1          datum pattern;
  66   1      
  67   1      
  68   1          /*
  69   1           * Perform a walking 1's test at the given address.
  70   1           */
  71   1          for (pattern = 1; pattern != 0; pattern <<= 1)
  72   1          {
  73   2              /*
  74   2               * Write the test pattern.
  75   2               */
  76   2              *address = pattern;
  77   2      
  78   2              /*
  79   2               * Read it back (immediately is okay for this test).
  80   2               */
  81   2              if (*address != pattern) 
  82   2              {
  83   3                  return (pattern);
  84   3              }
  85   2          }
  86   1      
  87   1          return (0);
  88   1      
  89   1      }   /* memTestDataBus() */
  90          
  91          
  92          /**********************************************************************
  93           *
  94           * Function:    memTestAddressBus()
  95           *
  96           * Description: Test the address bus wiring in a memory region by
  97           *              performing a walking 1's test on the relevant bits
  98           *              of the address and checking for aliasing. This test
  99           *              will find single-bit address failures such as stuck
 100           *              -high, stuck-low, and shorted pins.  The base address
 101           *              and size of the region are selected by the caller.
 102           *
 103           * Notes:       For best results, the selected base address should
 104           *              have enough LSB 0's to guarantee single address bit
 105           *              changes.  For example, to test a 64-Kbyte region, 
 106           *              select a base address on a 64-Kbyte boundary.  Also, 
 107           *              select the region size as a power-of-two--if at all 
 108           *              possible.
 109           *
 110           * Returns:     NULL if the test succeeds.  
 111           *              A non-zero result is the first address at which an
 112           *              aliasing problem was uncovered.  By examining the
 113           *              contents of memory, it may be possible to gather
 114           *              additional information about the problem.
 115           *
C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/14/2017 15:45:29 PAGE 3   

 116           **********************************************************************/
 117          datum * memTestAddressBus(volatile datum * baseAddress, unsigned long nBytes)
 118          {
 119   1          unsigned long addressMask = (nBytes/sizeof(datum) - 1);
 120   1          unsigned long offset;
 121   1          unsigned long testOffset;
 122   1      
 123   1          datum pattern     = (datum) 0xAAAAAAAA;
 124   1          datum antipattern = (datum) 0x55555555;
 125   1      
 126   1      
 127   1          /*
 128   1           * Write the default pattern at each of the power-of-two offsets.
 129   1           */
 130   1          for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 131   1          {
 132   2              baseAddress[offset] = pattern;
 133   2          }
 134   1      
 135   1          /* 
 136   1           * Check for address bits stuck high.
 137   1           */
 138   1          testOffset = 0;
 139   1          baseAddress[testOffset] = antipattern;
 140   1      
 141   1          for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 142   1          {
 143   2              if (baseAddress[offset] != pattern)
 144   2              {
 145   3                  return ((datum *) &baseAddress[offset]);
 146   3              }
 147   2          }
 148   1      
 149   1          baseAddress[testOffset] = pattern;
 150   1      
 151   1          /*
 152   1           * Check for address bits stuck low or shorted.
 153   1           */
 154   1          for (testOffset = 1; (testOffset & addressMask) != 0; testOffset <<= 1)
 155   1          {
 156   2              baseAddress[testOffset] = antipattern;
 157   2      
 158   2          if (baseAddress[0] != pattern)
 159   2          {
 160   3            return ((datum *) &baseAddress[testOffset]);
 161   3          }
 162   2      
 163   2              for (offset = 1; (offset & addressMask) != 0; offset <<= 1)
 164   2              {
 165   3                  if ((baseAddress[offset] != pattern) && (offset != testOffset))
 166   3                  {
 167   4                      return ((datum *) &baseAddress[testOffset]);
 168   4                  }
 169   3              }
 170   2      
 171   2              baseAddress[testOffset] = pattern;
 172   2          }
 173   1      
 174   1          return (NULL);
 175   1      
 176   1      }   /* memTestAddressBus() */

C51 COMPILER V9.56.0.0   COMPDESIGNPROJECT                                                 03/14/2017 15:45:29 PAGE 4   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    572    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      24
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
